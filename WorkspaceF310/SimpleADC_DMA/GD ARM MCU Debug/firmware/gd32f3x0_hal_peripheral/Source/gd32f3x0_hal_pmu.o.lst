   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"gd32f3x0_hal_pmu.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.hal_pmu_deinit,"ax",%progbits
  16              		.align	1
  17              		.global	hal_pmu_deinit
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	hal_pmu_deinit:
  25              	.LFB119:
  26              		.file 1 "../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c"
   1:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
   2:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \file    gd32f3x0_hal_pmu.c
   3:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief   PMU driver
   4:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
   5:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \version 2023-08-01, V1.0.0, HAL firmware for GD32F3x0
   6:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
   7:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
   8:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*
   9:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     Copyright (c) 2023, GigaDevice Semiconductor Inc.
  10:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  11:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     Redistribution and use in source and binary forms, with or without modification,
  12:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** are permitted provided that the following conditions are met:
  13:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  14:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     1. Redistributions of source code must retain the above copyright notice, this
  15:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****        list of conditions and the following disclaimer.
  16:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     2. Redistributions in binary form must reproduce the above copyright notice,
  17:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****        this list of conditions and the following disclaimer in the documentation
  18:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****        and/or other materials provided with the distribution.
  19:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     3. Neither the name of the copyright holder nor the names of its contributors
  20:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****        may be used to endorse or promote products derived from this software without
  21:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****        specific prior written permission.
  22:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  23:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  24:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  25:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
  26:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  27:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  28:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
  29:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
  30:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  31:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  32:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** OF SUCH DAMAGE.
  33:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
  34:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  35:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #include "gd32f3x0_hal.h"
  36:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  37:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
  38:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      reset PMU peripheral
  39:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
  40:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
  41:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
  42:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
  43:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     HAL_ERR_ADDRESS, HAL_ERR_NONE, details refer to gd32f3x0_hal.h
  44:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
  45:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** int32_t hal_pmu_deinit(hal_pmu_dev_struct *pmu_dev)
  46:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
  27              		.loc 1 46 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
  47:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
  48:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
  49:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(NULL == pmu_dev) {
  50:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] address is invalid");
  51:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return HAL_ERR_ADDRESS;
  52:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
  53:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
  54:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  55:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_BUSY;
  40              		.loc 1 55 20
  41 0008 7B68     		ldr	r3, [r7, #4]
  42 000a 0222     		movs	r2, #2
  43 000c 5A71     		strb	r2, [r3, #5]
  56:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* deinit PMU */
  57:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     hal_rcu_periph_reset_enable(RCU_PMURST);
  44              		.loc 1 57 5
  45 000e 40F21C40 		movw	r0, #1052
  46 0012 FFF7FEFF 		bl	hal_rcu_periph_reset_enable
  58:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     hal_rcu_periph_reset_disable(RCU_PMURST);
  47              		.loc 1 58 5
  48 0016 40F21C40 		movw	r0, #1052
  49 001a FFF7FEFF 		bl	hal_rcu_periph_reset_disable
  59:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  60:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU error state and state */
  61:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->error_state = HAL_PMU_ERROR_NONE;
  50              		.loc 1 61 26
  51 001e 7B68     		ldr	r3, [r7, #4]
  52 0020 0022     		movs	r2, #0
  53 0022 1A71     		strb	r2, [r3, #4]
  62:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_RESET;
  54              		.loc 1 62 20
  55 0024 7B68     		ldr	r3, [r7, #4]
  56 0026 0122     		movs	r2, #1
  57 0028 5A71     		strb	r2, [r3, #5]
  63:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  64:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* return function state */
  65:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return HAL_ERR_NONE;
  58              		.loc 1 65 12
  59 002a 0023     		movs	r3, #0
  66:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
  60              		.loc 1 66 1
  61 002c 1846     		mov	r0, r3
  62 002e 0837     		adds	r7, r7, #8
  63              		.cfi_def_cfa_offset 8
  64 0030 BD46     		mov	sp, r7
  65              		.cfi_def_cfa_register 13
  66              		@ sp needed
  67 0032 80BD     		pop	{r7, pc}
  68              		.cfi_endproc
  69              	.LFE119:
  71              		.section	.text.hal_pmu_struct_init,"ax",%progbits
  72              		.align	1
  73              		.global	hal_pmu_struct_init
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu softvfp
  79              	hal_pmu_struct_init:
  80              	.LFB120:
  67:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  68:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
  69:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      initialize the PMU structure with the default values
  70:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  hal_struct_type: the argument could be selected from enumeration <hal_pmu_struct_ty
  71:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] p_struct: pointer to PMU structure that contains the configuration information
  72:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
  73:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
  74:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hal_pmu_struct_init(hal_pmu_struct_type_enum hal_struct_type, void *p_struct)
  75:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
  81              		.loc 1 75 1
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 8
  84              		@ frame_needed = 1, uses_anonymous_args = 0
  85              		@ link register save eliminated.
  86 0000 80B4     		push	{r7}
  87              		.cfi_def_cfa_offset 4
  88              		.cfi_offset 7, -4
  89 0002 83B0     		sub	sp, sp, #12
  90              		.cfi_def_cfa_offset 16
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  93 0006 0346     		mov	r3, r0
  94 0008 3960     		str	r1, [r7]
  95 000a FB71     		strb	r3, [r7, #7]
  76:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
  77:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
  78:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(NULL == p_struct) {
  79:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [*p_struct] value is invalid");
  80:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
  81:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
  82:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
  83:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     switch(hal_struct_type) {
  96              		.loc 1 83 5
  97 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  98 000e 022B     		cmp	r3, #2
  99 0010 14D0     		beq	.L4
 100 0012 022B     		cmp	r3, #2
 101 0014 22DC     		bgt	.L9
 102 0016 002B     		cmp	r3, #0
 103 0018 02D0     		beq	.L6
 104 001a 012B     		cmp	r3, #1
 105 001c 0AD0     		beq	.L7
  84:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case HAL_PMU_INIT_STRUCT:
  85:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         /* initialize PMU initialization structure with the default values */
  86:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_init_struct *)p_struct)->int_event_mode      = PMU_LVD_EVENT_MODE;
  87:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_init_struct *)p_struct)->lvd_threshold       = PMU_LVDT_0;
  88:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_init_struct *)p_struct)->trig_type           = PMU_LVD_TRIG_BOTH;
  89:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
  90:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case HAL_PMU_IRQ_STRUCT:
  91:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         /* initialize PMU IRQ structure with the default values */
  92:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_lvd_irq_struct *)p_struct)->pmu_lvd_handle          = NULL;
  93:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
  94:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case HAL_PMU_DEV_STRUCT:
  95:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         /* initialize PMU device structure with the default values */
  96:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->pmu_lvd_irq.pmu_lvd_handle  = NULL;
  97:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->error_state                 = HAL_PMU_ERROR_NONE;
  98:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->state                       = HAL_PMU_STATE_NONE;
  99:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->mutex                       = HAL_MUTEX_UNLOCKED;
 100:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->priv                        = NULL;
 101:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 102:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     default:
 103:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGW("parameter [hal_struct_type] value is undefine");
 104:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 106              		.loc 1 104 9
 107 001e 1DE0     		b	.L9
 108              	.L6:
  86:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_init_struct *)p_struct)->lvd_threshold       = PMU_LVDT_0;
 109              		.loc 1 86 64
 110 0020 3B68     		ldr	r3, [r7]
 111 0022 0122     		movs	r2, #1
 112 0024 1A70     		strb	r2, [r3]
  87:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_init_struct *)p_struct)->trig_type           = PMU_LVD_TRIG_BOTH;
 113              		.loc 1 87 64
 114 0026 3B68     		ldr	r3, [r7]
 115 0028 0022     		movs	r2, #0
 116 002a 9A70     		strb	r2, [r3, #2]
  88:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 117              		.loc 1 88 64
 118 002c 3B68     		ldr	r3, [r7]
 119 002e 0222     		movs	r2, #2
 120 0030 5A70     		strb	r2, [r3, #1]
  89:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case HAL_PMU_IRQ_STRUCT:
 121              		.loc 1 89 9
 122 0032 14E0     		b	.L8
 123              	.L7:
  92:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 124              		.loc 1 92 71
 125 0034 3B68     		ldr	r3, [r7]
 126 0036 0022     		movs	r2, #0
 127 0038 1A60     		str	r2, [r3]
  93:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case HAL_PMU_DEV_STRUCT:
 128              		.loc 1 93 9
 129 003a 10E0     		b	.L8
 130              	.L4:
  96:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->error_state                 = HAL_PMU_ERROR_NONE;
 131              		.loc 1 96 71
 132 003c 3B68     		ldr	r3, [r7]
 133 003e 0022     		movs	r2, #0
 134 0040 1A60     		str	r2, [r3]
  97:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->state                       = HAL_PMU_STATE_NONE;
 135              		.loc 1 97 71
 136 0042 3B68     		ldr	r3, [r7]
 137 0044 0022     		movs	r2, #0
 138 0046 1A71     		strb	r2, [r3, #4]
  98:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->mutex                       = HAL_MUTEX_UNLOCKED;
 139              		.loc 1 98 71
 140 0048 3B68     		ldr	r3, [r7]
 141 004a 0022     		movs	r2, #0
 142 004c 5A71     		strb	r2, [r3, #5]
  99:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ((hal_pmu_dev_struct *)p_struct)->priv                        = NULL;
 143              		.loc 1 99 71
 144 004e 3B68     		ldr	r3, [r7]
 145 0050 0022     		movs	r2, #0
 146 0052 9A71     		strb	r2, [r3, #6]
 100:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 147              		.loc 1 100 71
 148 0054 3B68     		ldr	r3, [r7]
 149 0056 0022     		movs	r2, #0
 150 0058 9A60     		str	r2, [r3, #8]
 101:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     default:
 151              		.loc 1 101 9
 152 005a 00E0     		b	.L8
 153              	.L9:
 154              		.loc 1 104 9
 155 005c 00BF     		nop
 156              	.L8:
 105:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 106:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 157              		.loc 1 106 1
 158 005e 00BF     		nop
 159 0060 0C37     		adds	r7, r7, #12
 160              		.cfi_def_cfa_offset 4
 161 0062 BD46     		mov	sp, r7
 162              		.cfi_def_cfa_register 13
 163              		@ sp needed
 164 0064 80BC     		pop	{r7}
 165              		.cfi_restore 7
 166              		.cfi_def_cfa_offset 0
 167 0066 7047     		bx	lr
 168              		.cfi_endproc
 169              	.LFE120:
 171              		.section	.text.hal_pmu_lvd_init,"ax",%progbits
 172              		.align	1
 173              		.global	hal_pmu_lvd_init
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu softvfp
 179              	hal_pmu_lvd_init:
 180              	.LFB121:
 107:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 108:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 109:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      configure EXTI_16 and then configure low voltage detector threshold
 110:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 111:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 112:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 113:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out]  pmu_lvd_init: the data needed to configure LVD
 114:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   int_event_mode: PMU_INT_MODE, PMU_EVENT_MODE
 115:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   trig_type: PMU_TRIG_RISING, PMU_TRIG_FALLING, PMU_TRIG_BOTH
 116:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   lvd_threshold:
 117:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the argument could be selected from enumeration <hal_pmu_lvd_voltage_enum>
 118:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     HAL_ERR_ADDRESS, HAL_ERR_NONE, details refer to gd32f3x0_hal.h
 119:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 120:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** int32_t hal_pmu_lvd_init(hal_pmu_dev_struct *pmu_dev, hal_pmu_init_struct *pmu_lvd_init)
 121:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 181              		.loc 1 121 1
 182              		.cfi_startproc
 183              		@ args = 0, pretend = 0, frame = 8
 184              		@ frame_needed = 1, uses_anonymous_args = 0
 185 0000 80B5     		push	{r7, lr}
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 7, -8
 188              		.cfi_offset 14, -4
 189 0002 82B0     		sub	sp, sp, #8
 190              		.cfi_def_cfa_offset 16
 191 0004 00AF     		add	r7, sp, #0
 192              		.cfi_def_cfa_register 7
 193 0006 7860     		str	r0, [r7, #4]
 194 0008 3960     		str	r1, [r7]
 122:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 123:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 124:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((NULL == pmu_dev) || (NULL == pmu_lvd_init)) {
 125:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] or pointer [pmu_lvd_init] address is invalid");
 126:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         /* return function state */
 127:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return HAL_ERR_ADDRESS;
 128:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 129:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 130:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 131:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_BUSY;
 195              		.loc 1 131 20
 196 000a 7B68     		ldr	r3, [r7, #4]
 197 000c 0222     		movs	r2, #2
 198 000e 5A71     		strb	r2, [r3, #5]
 132:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 133:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     hal_exti_internal_deinit(EXTI_LINE_16_LVD);
 199              		.loc 1 133 5
 200 0010 4FF48030 		mov	r0, #65536
 201 0014 FFF7FEFF 		bl	hal_exti_internal_deinit
 134:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 135:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* set the EXTI mode and enable events from EXTI line 16 */
 136:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(PMU_LVD_EVENT_MODE == pmu_lvd_init->int_event_mode) {
 202              		.loc 1 136 42
 203 0018 3B68     		ldr	r3, [r7]
 204 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 205              		.loc 1 136 7
 206 001c 012B     		cmp	r3, #1
 207 001e 05D1     		bne	.L11
 137:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_EVEN |= (uint32_t)EXTI_EVEN_EVEN16;
 208              		.loc 1 137 19
 209 0020 244B     		ldr	r3, .L19
 210 0022 1B68     		ldr	r3, [r3]
 211 0024 234A     		ldr	r2, .L19
 212 0026 43F48033 		orr	r3, r3, #65536
 213 002a 1360     		str	r3, [r2]
 214              	.L11:
 138:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 139:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 140:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* set the EXTI trigger type */
 141:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     switch(pmu_lvd_init->trig_type) {
 215              		.loc 1 141 24
 216 002c 3B68     		ldr	r3, [r7]
 217 002e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 218              		.loc 1 141 5
 219 0030 022B     		cmp	r3, #2
 220 0032 20D0     		beq	.L12
 221 0034 022B     		cmp	r3, #2
 222 0036 2BDC     		bgt	.L18
 223 0038 002B     		cmp	r3, #0
 224 003a 02D0     		beq	.L14
 225 003c 012B     		cmp	r3, #1
 226 003e 0DD0     		beq	.L15
 142:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case PMU_LVD_TRIG_RISING:
 143:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_RTEN |= (uint32_t)EXTI_RTEN_RTEN16;
 144:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_FTEN &= ~(uint32_t)EXTI_FTEN_FTEN16;
 145:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 146:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case PMU_LVD_TRIG_FALLING:
 147:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_RTEN &= ~(uint32_t)EXTI_RTEN_RTEN16;
 148:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_FTEN |= (uint32_t)EXTI_FTEN_FTEN16;
 149:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 150:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case PMU_LVD_TRIG_BOTH:
 151:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_RTEN |= (uint32_t)EXTI_RTEN_RTEN16;
 152:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_FTEN |= (uint32_t)EXTI_FTEN_FTEN16;
 153:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 154:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     default:
 155:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("parameter [pmu_lvd_init->trig_type] value is invalid");
 156:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 227              		.loc 1 156 9
 228 0040 26E0     		b	.L18
 229              	.L14:
 143:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_FTEN &= ~(uint32_t)EXTI_FTEN_FTEN16;
 230              		.loc 1 143 19
 231 0042 1D4B     		ldr	r3, .L19+4
 232 0044 1B68     		ldr	r3, [r3]
 233 0046 1C4A     		ldr	r2, .L19+4
 234 0048 43F48033 		orr	r3, r3, #65536
 235 004c 1360     		str	r3, [r2]
 144:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 236              		.loc 1 144 19
 237 004e 1B4B     		ldr	r3, .L19+8
 238 0050 1B68     		ldr	r3, [r3]
 239 0052 1A4A     		ldr	r2, .L19+8
 240 0054 23F48033 		bic	r3, r3, #65536
 241 0058 1360     		str	r3, [r2]
 145:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case PMU_LVD_TRIG_FALLING:
 242              		.loc 1 145 9
 243 005a 1AE0     		b	.L16
 244              	.L15:
 147:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_FTEN |= (uint32_t)EXTI_FTEN_FTEN16;
 245              		.loc 1 147 19
 246 005c 164B     		ldr	r3, .L19+4
 247 005e 1B68     		ldr	r3, [r3]
 248 0060 154A     		ldr	r2, .L19+4
 249 0062 23F48033 		bic	r3, r3, #65536
 250 0066 1360     		str	r3, [r2]
 148:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 251              		.loc 1 148 19
 252 0068 144B     		ldr	r3, .L19+8
 253 006a 1B68     		ldr	r3, [r3]
 254 006c 134A     		ldr	r2, .L19+8
 255 006e 43F48033 		orr	r3, r3, #65536
 256 0072 1360     		str	r3, [r2]
 149:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     case PMU_LVD_TRIG_BOTH:
 257              		.loc 1 149 9
 258 0074 0DE0     		b	.L16
 259              	.L12:
 151:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_FTEN |= (uint32_t)EXTI_FTEN_FTEN16;
 260              		.loc 1 151 19
 261 0076 104B     		ldr	r3, .L19+4
 262 0078 1B68     		ldr	r3, [r3]
 263 007a 0F4A     		ldr	r2, .L19+4
 264 007c 43F48033 		orr	r3, r3, #65536
 265 0080 1360     		str	r3, [r2]
 152:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         break;
 266              		.loc 1 152 19
 267 0082 0E4B     		ldr	r3, .L19+8
 268 0084 1B68     		ldr	r3, [r3]
 269 0086 0D4A     		ldr	r2, .L19+8
 270 0088 43F48033 		orr	r3, r3, #65536
 271 008c 1360     		str	r3, [r2]
 153:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     default:
 272              		.loc 1 153 9
 273 008e 00E0     		b	.L16
 274              	.L18:
 275              		.loc 1 156 9
 276 0090 00BF     		nop
 277              	.L16:
 157:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 158:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 159:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     hals_pmu_lvd_select(pmu_lvd_init->lvd_threshold);
 278              		.loc 1 159 37
 279 0092 3B68     		ldr	r3, [r7]
 280 0094 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 281              		.loc 1 159 5
 282 0096 1846     		mov	r0, r3
 283 0098 FFF7FEFF 		bl	hals_pmu_lvd_select
 160:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 161:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU error state */
 162:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->error_state = HAL_PMU_ERROR_NONE;
 284              		.loc 1 162 26
 285 009c 7B68     		ldr	r3, [r7, #4]
 286 009e 0022     		movs	r2, #0
 287 00a0 1A71     		strb	r2, [r3, #4]
 163:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU state */
 164:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_READY;
 288              		.loc 1 164 20
 289 00a2 7B68     		ldr	r3, [r7, #4]
 290 00a4 0522     		movs	r2, #5
 291 00a6 5A71     		strb	r2, [r3, #5]
 165:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 166:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* return function state */
 167:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return HAL_ERR_NONE;
 292              		.loc 1 167 12
 293 00a8 0023     		movs	r3, #0
 168:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 294              		.loc 1 168 1
 295 00aa 1846     		mov	r0, r3
 296 00ac 0837     		adds	r7, r7, #8
 297              		.cfi_def_cfa_offset 8
 298 00ae BD46     		mov	sp, r7
 299              		.cfi_def_cfa_register 13
 300              		@ sp needed
 301 00b0 80BD     		pop	{r7, pc}
 302              	.L20:
 303 00b2 00BF     		.align	2
 304              	.L19:
 305 00b4 04040140 		.word	1073808388
 306 00b8 08040140 		.word	1073808392
 307 00bc 0C040140 		.word	1073808396
 308              		.cfi_endproc
 309              	.LFE121:
 311              		.section	.text.hal_pmu_lvd_start,"ax",%progbits
 312              		.align	1
 313              		.global	hal_pmu_lvd_start
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu softvfp
 319              	hal_pmu_lvd_start:
 320              	.LFB122:
 169:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 170:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 171:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      start LVD detector
 172:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 173:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 174:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 175:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 176:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     HAL_ERR_ADDRESS, HAL_ERR_NONE, details refer to gd32f3x0_hal.h
 177:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 178:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** int32_t hal_pmu_lvd_start(hal_pmu_dev_struct *pmu_dev)
 179:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 321              		.loc 1 179 1
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 8
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 326 0000 80B4     		push	{r7}
 327              		.cfi_def_cfa_offset 4
 328              		.cfi_offset 7, -4
 329 0002 83B0     		sub	sp, sp, #12
 330              		.cfi_def_cfa_offset 16
 331 0004 00AF     		add	r7, sp, #0
 332              		.cfi_def_cfa_register 7
 333 0006 7860     		str	r0, [r7, #4]
 180:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 181:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 182:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(NULL == pmu_dev) {
 183:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] address is invalid");
 184:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return HAL_ERR_ADDRESS;
 185:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 186:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 187:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_BUSY;
 334              		.loc 1 187 20
 335 0008 7B68     		ldr	r3, [r7, #4]
 336 000a 0222     		movs	r2, #2
 337 000c 5A71     		strb	r2, [r3, #5]
 188:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 189:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* enable LVD */
 190:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= PMU_CTL_LVDEN;
 338              		.loc 1 190 13
 339 000e 074B     		ldr	r3, .L23
 340 0010 1B68     		ldr	r3, [r3]
 341 0012 064A     		ldr	r2, .L23
 342 0014 43F01003 		orr	r3, r3, #16
 343 0018 1360     		str	r3, [r2]
 191:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 192:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_READY;
 344              		.loc 1 192 20
 345 001a 7B68     		ldr	r3, [r7, #4]
 346 001c 0522     		movs	r2, #5
 347 001e 5A71     		strb	r2, [r3, #5]
 193:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* return function state */
 194:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return HAL_ERR_NONE;
 348              		.loc 1 194 12
 349 0020 0023     		movs	r3, #0
 195:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 350              		.loc 1 195 1
 351 0022 1846     		mov	r0, r3
 352 0024 0C37     		adds	r7, r7, #12
 353              		.cfi_def_cfa_offset 4
 354 0026 BD46     		mov	sp, r7
 355              		.cfi_def_cfa_register 13
 356              		@ sp needed
 357 0028 80BC     		pop	{r7}
 358              		.cfi_restore 7
 359              		.cfi_def_cfa_offset 0
 360 002a 7047     		bx	lr
 361              	.L24:
 362              		.align	2
 363              	.L23:
 364 002c 00700040 		.word	1073770496
 365              		.cfi_endproc
 366              	.LFE122:
 368              		.section	.text.hal_pmu_lvd_stop,"ax",%progbits
 369              		.align	1
 370              		.global	hal_pmu_lvd_stop
 371              		.syntax unified
 372              		.thumb
 373              		.thumb_func
 374              		.fpu softvfp
 376              	hal_pmu_lvd_stop:
 377              	.LFB123:
 196:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 197:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 198:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      stop LVD detector
 199:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 200:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 201:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 202:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 203:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     HAL_ERR_ADDRESS, HAL_ERR_NONE, details refer to gd32f3x0_hal.h
 204:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 205:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** int32_t hal_pmu_lvd_stop(hal_pmu_dev_struct *pmu_dev)
 206:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 378              		.loc 1 206 1
 379              		.cfi_startproc
 380              		@ args = 0, pretend = 0, frame = 8
 381              		@ frame_needed = 1, uses_anonymous_args = 0
 382 0000 80B5     		push	{r7, lr}
 383              		.cfi_def_cfa_offset 8
 384              		.cfi_offset 7, -8
 385              		.cfi_offset 14, -4
 386 0002 82B0     		sub	sp, sp, #8
 387              		.cfi_def_cfa_offset 16
 388 0004 00AF     		add	r7, sp, #0
 389              		.cfi_def_cfa_register 7
 390 0006 7860     		str	r0, [r7, #4]
 207:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 208:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 209:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(NULL == pmu_dev) {
 210:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] address is invalid");
 211:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return HAL_ERR_ADDRESS;
 212:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 213:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 214:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_BUSY;
 391              		.loc 1 214 20
 392 0008 7B68     		ldr	r3, [r7, #4]
 393 000a 0222     		movs	r2, #2
 394 000c 5A71     		strb	r2, [r3, #5]
 215:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 216:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* disable LVD */
 217:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LVDEN;
 395              		.loc 1 217 13
 396 000e 0F4B     		ldr	r3, .L27
 397 0010 1B68     		ldr	r3, [r3]
 398 0012 0E4A     		ldr	r2, .L27
 399 0014 23F01003 		bic	r3, r3, #16
 400 0018 1360     		str	r3, [r2]
 218:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     EXTI_EVEN &= (uint32_t)~EXTI_EVEN_EVEN16;
 401              		.loc 1 218 15
 402 001a 0D4B     		ldr	r3, .L27+4
 403 001c 1B68     		ldr	r3, [r3]
 404 001e 0C4A     		ldr	r2, .L27+4
 405 0020 23F48033 		bic	r3, r3, #65536
 406 0024 1360     		str	r3, [r2]
 219:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     EXTI_INTEN &= (uint32_t)~EXTI_INTEN_INTEN16;
 407              		.loc 1 219 16
 408 0026 0B4B     		ldr	r3, .L27+8
 409 0028 1B68     		ldr	r3, [r3]
 410 002a 0A4A     		ldr	r2, .L27+8
 411 002c 23F48033 		bic	r3, r3, #65536
 412 0030 1360     		str	r3, [r2]
 220:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     hals_exti_interrupt_flag_clear(EXTI_LVD_16);
 413              		.loc 1 220 5
 414 0032 4FF48030 		mov	r0, #65536
 415 0036 FFF7FEFF 		bl	hals_exti_interrupt_flag_clear
 221:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 222:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_READY;
 416              		.loc 1 222 20
 417 003a 7B68     		ldr	r3, [r7, #4]
 418 003c 0522     		movs	r2, #5
 419 003e 5A71     		strb	r2, [r3, #5]
 223:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 224:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* return function state */
 225:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return HAL_ERR_NONE;
 420              		.loc 1 225 12
 421 0040 0023     		movs	r3, #0
 226:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 422              		.loc 1 226 1
 423 0042 1846     		mov	r0, r3
 424 0044 0837     		adds	r7, r7, #8
 425              		.cfi_def_cfa_offset 8
 426 0046 BD46     		mov	sp, r7
 427              		.cfi_def_cfa_register 13
 428              		@ sp needed
 429 0048 80BD     		pop	{r7, pc}
 430              	.L28:
 431 004a 00BF     		.align	2
 432              	.L27:
 433 004c 00700040 		.word	1073770496
 434 0050 04040140 		.word	1073808388
 435 0054 00040140 		.word	1073808384
 436              		.cfi_endproc
 437              	.LFE123:
 439              		.section	.text.hal_pmu_wakeup_pin_enable,"ax",%progbits
 440              		.align	1
 441              		.global	hal_pmu_wakeup_pin_enable
 442              		.syntax unified
 443              		.thumb
 444              		.thumb_func
 445              		.fpu softvfp
 447              	hal_pmu_wakeup_pin_enable:
 448              	.LFB124:
 227:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 228:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 229:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      enable wakeup pin
 230:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 231:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 232:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 233:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  wakeup_pin:
 234:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 one or more parameters can be selected which are shown as below:
 235:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN0: WKUP Pin 0 (PA0)
 236:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN1: WKUP Pin 1 (PC13)
 237:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN4: WKUP Pin 4 (PC5)
 238:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN5: WKUP Pin 5 (PB5)
 239:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN6: WKUP Pin 6 (PB15)
 240:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 241:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 242:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 243:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** int32_t hal_pmu_wakeup_pin_enable(hal_pmu_dev_struct *pmu_dev, uint32_t wakeup_pin)
 244:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 449              		.loc 1 244 1
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 8
 452              		@ frame_needed = 1, uses_anonymous_args = 0
 453              		@ link register save eliminated.
 454 0000 80B4     		push	{r7}
 455              		.cfi_def_cfa_offset 4
 456              		.cfi_offset 7, -4
 457 0002 83B0     		sub	sp, sp, #12
 458              		.cfi_def_cfa_offset 16
 459 0004 00AF     		add	r7, sp, #0
 460              		.cfi_def_cfa_register 7
 461 0006 7860     		str	r0, [r7, #4]
 462 0008 3960     		str	r1, [r7]
 245:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 246:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 247:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((NULL == pmu_dev)) {
 248:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] address is invalid");
 249:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         /* return function state */
 250:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return HAL_ERR_ADDRESS;
 251:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 252:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 253:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_BUSY;
 463              		.loc 1 253 20
 464 000a 7B68     		ldr	r3, [r7, #4]
 465 000c 0222     		movs	r2, #2
 466 000e 5A71     		strb	r2, [r3, #5]
 254:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 255:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CS |= wakeup_pin;
 467              		.loc 1 255 12
 468 0010 084B     		ldr	r3, .L31
 469 0012 1A68     		ldr	r2, [r3]
 470 0014 0749     		ldr	r1, .L31
 471 0016 3B68     		ldr	r3, [r7]
 472 0018 1343     		orrs	r3, r3, r2
 473 001a 0B60     		str	r3, [r1]
 256:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 257:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU error state */
 258:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->error_state = HAL_PMU_ERROR_NONE;
 474              		.loc 1 258 26
 475 001c 7B68     		ldr	r3, [r7, #4]
 476 001e 0022     		movs	r2, #0
 477 0020 1A71     		strb	r2, [r3, #4]
 259:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU state */
 260:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_READY;
 478              		.loc 1 260 20
 479 0022 7B68     		ldr	r3, [r7, #4]
 480 0024 0522     		movs	r2, #5
 481 0026 5A71     		strb	r2, [r3, #5]
 261:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 262:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* return function state */
 263:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return HAL_ERR_NONE;
 482              		.loc 1 263 12
 483 0028 0023     		movs	r3, #0
 264:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 484              		.loc 1 264 1
 485 002a 1846     		mov	r0, r3
 486 002c 0C37     		adds	r7, r7, #12
 487              		.cfi_def_cfa_offset 4
 488 002e BD46     		mov	sp, r7
 489              		.cfi_def_cfa_register 13
 490              		@ sp needed
 491 0030 80BC     		pop	{r7}
 492              		.cfi_restore 7
 493              		.cfi_def_cfa_offset 0
 494 0032 7047     		bx	lr
 495              	.L32:
 496              		.align	2
 497              	.L31:
 498 0034 04700040 		.word	1073770500
 499              		.cfi_endproc
 500              	.LFE124:
 502              		.section	.text.hal_pmu_wakeup_pin_disable,"ax",%progbits
 503              		.align	1
 504              		.global	hal_pmu_wakeup_pin_disable
 505              		.syntax unified
 506              		.thumb
 507              		.thumb_func
 508              		.fpu softvfp
 510              	hal_pmu_wakeup_pin_disable:
 511              	.LFB125:
 265:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 266:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 267:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      disable wakeup pin
 268:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 269:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 270:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 271:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  wakeup_pin:
 272:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 one or more parameters can be selected which are shown as below:
 273:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN0: WKUP Pin 0 (PA0)
 274:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN1: WKUP Pin 1 (PC13)
 275:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN4: WKUP Pin 4 (PC5)
 276:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN5: WKUP Pin 5 (PB5)
 277:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_WAKEUP_PIN6: WKUP Pin 6 (PB15)
 278:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 279:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 280:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 281:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** int32_t hal_pmu_wakeup_pin_disable(hal_pmu_dev_struct *pmu_dev, uint32_t wakeup_pin)
 282:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 512              		.loc 1 282 1
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 8
 515              		@ frame_needed = 1, uses_anonymous_args = 0
 516              		@ link register save eliminated.
 517 0000 80B4     		push	{r7}
 518              		.cfi_def_cfa_offset 4
 519              		.cfi_offset 7, -4
 520 0002 83B0     		sub	sp, sp, #12
 521              		.cfi_def_cfa_offset 16
 522 0004 00AF     		add	r7, sp, #0
 523              		.cfi_def_cfa_register 7
 524 0006 7860     		str	r0, [r7, #4]
 525 0008 3960     		str	r1, [r7]
 283:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 284:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 285:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((NULL == pmu_dev)) {
 286:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] address is invalid");
 287:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         /* return function state */
 288:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return HAL_ERR_ADDRESS;
 289:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 290:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 291:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_BUSY;
 526              		.loc 1 291 20
 527 000a 7B68     		ldr	r3, [r7, #4]
 528 000c 0222     		movs	r2, #2
 529 000e 5A71     		strb	r2, [r3, #5]
 292:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 293:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CS &= ~(wakeup_pin);
 530              		.loc 1 293 12
 531 0010 094B     		ldr	r3, .L35
 532 0012 1A68     		ldr	r2, [r3]
 533              		.loc 1 293 15
 534 0014 3B68     		ldr	r3, [r7]
 535 0016 DB43     		mvns	r3, r3
 536              		.loc 1 293 12
 537 0018 0749     		ldr	r1, .L35
 538 001a 1340     		ands	r3, r3, r2
 539 001c 0B60     		str	r3, [r1]
 294:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 295:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU error state */
 296:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->error_state = HAL_PMU_ERROR_NONE;
 540              		.loc 1 296 26
 541 001e 7B68     		ldr	r3, [r7, #4]
 542 0020 0022     		movs	r2, #0
 543 0022 1A71     		strb	r2, [r3, #4]
 297:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU state */
 298:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_READY;
 544              		.loc 1 298 20
 545 0024 7B68     		ldr	r3, [r7, #4]
 546 0026 0522     		movs	r2, #5
 547 0028 5A71     		strb	r2, [r3, #5]
 299:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 300:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* return function state */
 301:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return HAL_ERR_NONE;
 548              		.loc 1 301 12
 549 002a 0023     		movs	r3, #0
 302:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 550              		.loc 1 302 1
 551 002c 1846     		mov	r0, r3
 552 002e 0C37     		adds	r7, r7, #12
 553              		.cfi_def_cfa_offset 4
 554 0030 BD46     		mov	sp, r7
 555              		.cfi_def_cfa_register 13
 556              		@ sp needed
 557 0032 80BC     		pop	{r7}
 558              		.cfi_restore 7
 559              		.cfi_def_cfa_offset 0
 560 0034 7047     		bx	lr
 561              	.L36:
 562 0036 00BF     		.align	2
 563              	.L35:
 564 0038 04700040 		.word	1073770500
 565              		.cfi_endproc
 566              	.LFE125:
 568              		.section	.text.hal_pmu_lvd_irq,"ax",%progbits
 569              		.align	1
 570              		.global	hal_pmu_lvd_irq
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 574              		.fpu softvfp
 576              	hal_pmu_lvd_irq:
 577              	.LFB126:
 303:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 304:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 305:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      PMU interrupt handler content function
 306:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 307:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 308:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 309:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 310:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 311:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 312:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hal_pmu_lvd_irq(hal_pmu_dev_struct *pmu_dev)
 313:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 578              		.loc 1 313 1
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 8
 581              		@ frame_needed = 1, uses_anonymous_args = 0
 582 0000 80B5     		push	{r7, lr}
 583              		.cfi_def_cfa_offset 8
 584              		.cfi_offset 7, -8
 585              		.cfi_offset 14, -4
 586 0002 82B0     		sub	sp, sp, #8
 587              		.cfi_def_cfa_offset 16
 588 0004 00AF     		add	r7, sp, #0
 589              		.cfi_def_cfa_register 7
 590 0006 7860     		str	r0, [r7, #4]
 314:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 315:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 316:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((NULL == pmu_dev)) {
 317:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] address is invalid");
 318:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 319:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 320:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_BUSY;
 591              		.loc 1 320 20
 592 0008 7B68     		ldr	r3, [r7, #4]
 593 000a 0222     		movs	r2, #2
 594 000c 5A71     		strb	r2, [r3, #5]
 321:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 322:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* LVD interrupt handle */
 323:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(RESET != hals_exti_interrupt_flag_get(EXTI_LVD_16)) {
 595              		.loc 1 323 17
 596 000e 4FF48030 		mov	r0, #65536
 597 0012 FFF7FEFF 		bl	hals_exti_interrupt_flag_get
 598 0016 0346     		mov	r3, r0
 599              		.loc 1 323 7
 600 0018 002B     		cmp	r3, #0
 601 001a 0BD0     		beq	.L38
 324:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         hals_exti_interrupt_flag_clear(EXTI_LVD_16);
 602              		.loc 1 324 9
 603 001c 4FF48030 		mov	r0, #65536
 604 0020 FFF7FEFF 		bl	hals_exti_interrupt_flag_clear
 325:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 326:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         if(NULL != pmu_dev->pmu_lvd_irq.pmu_lvd_handle) {
 605              		.loc 1 326 40
 606 0024 7B68     		ldr	r3, [r7, #4]
 607 0026 1B68     		ldr	r3, [r3]
 608              		.loc 1 326 11
 609 0028 002B     		cmp	r3, #0
 610 002a 03D0     		beq	.L38
 327:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****             pmu_dev->pmu_lvd_irq.pmu_lvd_handle(pmu_dev);
 611              		.loc 1 327 33
 612 002c 7B68     		ldr	r3, [r7, #4]
 613 002e 1B68     		ldr	r3, [r3]
 614              		.loc 1 327 13
 615 0030 7868     		ldr	r0, [r7, #4]
 616 0032 9847     		blx	r3
 617              	.LVL0:
 618              	.L38:
 328:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         }
 329:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 330:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU error state */
 331:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->error_state = HAL_PMU_ERROR_NONE;
 619              		.loc 1 331 26
 620 0034 7B68     		ldr	r3, [r7, #4]
 621 0036 0022     		movs	r2, #0
 622 0038 1A71     		strb	r2, [r3, #4]
 332:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* change PMU state */
 333:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->state = HAL_PMU_STATE_READY;
 623              		.loc 1 333 20
 624 003a 7B68     		ldr	r3, [r7, #4]
 625 003c 0522     		movs	r2, #5
 626 003e 5A71     		strb	r2, [r3, #5]
 334:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 627              		.loc 1 334 1
 628 0040 00BF     		nop
 629 0042 0837     		adds	r7, r7, #8
 630              		.cfi_def_cfa_offset 8
 631 0044 BD46     		mov	sp, r7
 632              		.cfi_def_cfa_register 13
 633              		@ sp needed
 634 0046 80BD     		pop	{r7, pc}
 635              		.cfi_endproc
 636              	.LFE126:
 638              		.section	.text.hal_pmu_lvd_irq_handle_set,"ax",%progbits
 639              		.align	1
 640              		.global	hal_pmu_lvd_irq_handle_set
 641              		.syntax unified
 642              		.thumb
 643              		.thumb_func
 644              		.fpu softvfp
 646              	hal_pmu_lvd_irq_handle_set:
 647              	.LFB127:
 335:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 336:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 337:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      set user-defined interrupt callback function,
 338:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 which will be registered and called when corresponding interrupt be triggered
 339:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 340:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 341:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 342:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  irq_handle: the callback handler of PMU interrupt
 343:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 344:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 345:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 346:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hal_pmu_lvd_irq_handle_set(hal_pmu_dev_struct *pmu_dev, hal_pmu_lvd_irq_struct *irq_handle)
 347:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 648              		.loc 1 347 1
 649              		.cfi_startproc
 650              		@ args = 0, pretend = 0, frame = 8
 651              		@ frame_needed = 1, uses_anonymous_args = 0
 652              		@ link register save eliminated.
 653 0000 80B4     		push	{r7}
 654              		.cfi_def_cfa_offset 4
 655              		.cfi_offset 7, -4
 656 0002 83B0     		sub	sp, sp, #12
 657              		.cfi_def_cfa_offset 16
 658 0004 00AF     		add	r7, sp, #0
 659              		.cfi_def_cfa_register 7
 660 0006 7860     		str	r0, [r7, #4]
 661 0008 3960     		str	r1, [r7]
 348:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 349:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 350:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((NULL == pmu_dev) || (NULL == irq_handle)) {
 351:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] or [irq_handle] address is invalid");
 352:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 353:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 354:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 355:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(NULL != irq_handle->pmu_lvd_handle) {
 662              		.loc 1 355 26
 663 000a 3B68     		ldr	r3, [r7]
 664 000c 1B68     		ldr	r3, [r3]
 665              		.loc 1 355 7
 666 000e 002B     		cmp	r3, #0
 667 0010 04D0     		beq	.L40
 356:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         pmu_dev->pmu_lvd_irq.pmu_lvd_handle = irq_handle->pmu_lvd_handle;
 668              		.loc 1 356 57
 669 0012 3B68     		ldr	r3, [r7]
 670 0014 1A68     		ldr	r2, [r3]
 671              		.loc 1 356 45
 672 0016 7B68     		ldr	r3, [r7, #4]
 673 0018 1A60     		str	r2, [r3]
 357:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     } else {
 358:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         pmu_dev->pmu_lvd_irq.pmu_lvd_handle = NULL;
 359:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 360:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 674              		.loc 1 360 1
 675 001a 02E0     		b	.L42
 676              	.L40:
 358:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 677              		.loc 1 358 45
 678 001c 7B68     		ldr	r3, [r7, #4]
 679 001e 0022     		movs	r2, #0
 680 0020 1A60     		str	r2, [r3]
 681              	.L42:
 682              		.loc 1 360 1
 683 0022 00BF     		nop
 684 0024 0C37     		adds	r7, r7, #12
 685              		.cfi_def_cfa_offset 4
 686 0026 BD46     		mov	sp, r7
 687              		.cfi_def_cfa_register 13
 688              		@ sp needed
 689 0028 80BC     		pop	{r7}
 690              		.cfi_restore 7
 691              		.cfi_def_cfa_offset 0
 692 002a 7047     		bx	lr
 693              		.cfi_endproc
 694              	.LFE127:
 696              		.section	.text.hal_pmu_lvd_irq_handle_all_reset,"ax",%progbits
 697              		.align	1
 698              		.global	hal_pmu_lvd_irq_handle_all_reset
 699              		.syntax unified
 700              		.thumb
 701              		.thumb_func
 702              		.fpu softvfp
 704              	hal_pmu_lvd_irq_handle_all_reset:
 705              	.LFB128:
 361:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 362:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 363:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      reset all user-defined interrupt callback function,
 364:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 which will be registered and called when corresponding interrupt be triggered
 365:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 366:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 367:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 368:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 369:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 370:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 371:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 372:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hal_pmu_lvd_irq_handle_all_reset(hal_pmu_dev_struct *pmu_dev)
 373:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 706              		.loc 1 373 1
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 8
 709              		@ frame_needed = 1, uses_anonymous_args = 0
 710              		@ link register save eliminated.
 711 0000 80B4     		push	{r7}
 712              		.cfi_def_cfa_offset 4
 713              		.cfi_offset 7, -4
 714 0002 83B0     		sub	sp, sp, #12
 715              		.cfi_def_cfa_offset 16
 716 0004 00AF     		add	r7, sp, #0
 717              		.cfi_def_cfa_register 7
 718 0006 7860     		str	r0, [r7, #4]
 374:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 375:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 376:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((NULL == pmu_dev)) {
 377:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] address is invalid");
 378:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 379:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 380:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->pmu_lvd_irq.pmu_lvd_handle = NULL;
 719              		.loc 1 380 41
 720 0008 7B68     		ldr	r3, [r7, #4]
 721 000a 0022     		movs	r2, #0
 722 000c 1A60     		str	r2, [r3]
 381:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 723              		.loc 1 381 1
 724 000e 00BF     		nop
 725 0010 0C37     		adds	r7, r7, #12
 726              		.cfi_def_cfa_offset 4
 727 0012 BD46     		mov	sp, r7
 728              		.cfi_def_cfa_register 13
 729              		@ sp needed
 730 0014 80BC     		pop	{r7}
 731              		.cfi_restore 7
 732              		.cfi_def_cfa_offset 0
 733 0016 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE128:
 737              		.section	.text.hal_pmu_lvd_start_interrupt,"ax",%progbits
 738              		.align	1
 739              		.global	hal_pmu_lvd_start_interrupt
 740              		.syntax unified
 741              		.thumb
 742              		.thumb_func
 743              		.fpu softvfp
 745              	hal_pmu_lvd_start_interrupt:
 746              	.LFB129:
 382:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 383:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 384:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      start PMU lvd with interrupt mode
 385:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 386:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 387:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 388:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  irq_handle: the callback handler of PMU interrupt
 389:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 390:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 391:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 392:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** int32_t hal_pmu_lvd_start_interrupt(hal_pmu_dev_struct *pmu_dev, hal_pmu_lvd_irq_struct *irq_handle
 393:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 747              		.loc 1 393 1
 748              		.cfi_startproc
 749              		@ args = 0, pretend = 0, frame = 8
 750              		@ frame_needed = 1, uses_anonymous_args = 0
 751              		@ link register save eliminated.
 752 0000 80B4     		push	{r7}
 753              		.cfi_def_cfa_offset 4
 754              		.cfi_offset 7, -4
 755 0002 83B0     		sub	sp, sp, #12
 756              		.cfi_def_cfa_offset 16
 757 0004 00AF     		add	r7, sp, #0
 758              		.cfi_def_cfa_register 7
 759 0006 7860     		str	r0, [r7, #4]
 760 0008 3960     		str	r1, [r7]
 394:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 395:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 396:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((NULL == pmu_dev) || (NULL == irq_handle)) {
 397:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] or pointer [irq_handle] address is invalid");
 398:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 399:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 400:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     HAL_LOCK(pmu_dev);
 761              		.loc 1 400 5
 762 000a 7B68     		ldr	r3, [r7, #4]
 763 000c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 764 000e 012B     		cmp	r3, #1
 765 0010 02D1     		bne	.L45
 766              		.loc 1 400 5 is_stmt 0 discriminator 1
 767 0012 6FF00103 		mvn	r3, #1
 768 0016 1DE0     		b	.L46
 769              	.L45:
 770              		.loc 1 400 5 discriminator 2
 771 0018 7B68     		ldr	r3, [r7, #4]
 772 001a 0122     		movs	r2, #1
 773 001c 9A71     		strb	r2, [r3, #6]
 401:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* enable LVD */
 402:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= PMU_CTL_LVDEN;
 774              		.loc 1 402 13 is_stmt 1 discriminator 2
 775 001e 104B     		ldr	r3, .L49
 776 0020 1B68     		ldr	r3, [r3]
 777 0022 0F4A     		ldr	r2, .L49
 778 0024 43F01003 		orr	r3, r3, #16
 779 0028 1360     		str	r3, [r2]
 403:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 404:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->pmu_lvd_irq.pmu_lvd_handle = irq_handle->pmu_lvd_handle;
 780              		.loc 1 404 53 discriminator 2
 781 002a 3B68     		ldr	r3, [r7]
 782 002c 1A68     		ldr	r2, [r3]
 783              		.loc 1 404 41 discriminator 2
 784 002e 7B68     		ldr	r3, [r7, #4]
 785 0030 1A60     		str	r2, [r3]
 405:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* enable interrupt mode */
 406:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(NULL != pmu_dev->pmu_lvd_irq.pmu_lvd_handle) {
 786              		.loc 1 406 36 discriminator 2
 787 0032 7B68     		ldr	r3, [r7, #4]
 788 0034 1B68     		ldr	r3, [r3]
 789              		.loc 1 406 7 discriminator 2
 790 0036 002B     		cmp	r3, #0
 791 0038 0AD0     		beq	.L47
 407:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         EXTI_INTEN |= (uint32_t)EXTI_INTEN_INTEN16;
 792              		.loc 1 407 20
 793 003a 0A4B     		ldr	r3, .L49+4
 794 003c 1B68     		ldr	r3, [r3]
 795 003e 094A     		ldr	r2, .L49+4
 796 0040 43F48033 		orr	r3, r3, #65536
 797 0044 1360     		str	r3, [r2]
 408:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     } else {
 409:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [irq_handle] address is invalid");
 410:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return HAL_ERR_ADDRESS;
 411:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 412:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 413:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     HAL_UNLOCK(pmu_dev);
 798              		.loc 1 413 5
 799 0046 7B68     		ldr	r3, [r7, #4]
 800 0048 0022     		movs	r2, #0
 801 004a 9A71     		strb	r2, [r3, #6]
 414:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return HAL_ERR_NONE;
 802              		.loc 1 414 12
 803 004c 0023     		movs	r3, #0
 804 004e 01E0     		b	.L46
 805              	.L47:
 410:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 806              		.loc 1 410 16
 807 0050 6FF00603 		mvn	r3, #6
 808              	.L46:
 415:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 809              		.loc 1 415 1
 810 0054 1846     		mov	r0, r3
 811 0056 0C37     		adds	r7, r7, #12
 812              		.cfi_def_cfa_offset 4
 813 0058 BD46     		mov	sp, r7
 814              		.cfi_def_cfa_register 13
 815              		@ sp needed
 816 005a 80BC     		pop	{r7}
 817              		.cfi_restore 7
 818              		.cfi_def_cfa_offset 0
 819 005c 7047     		bx	lr
 820              	.L50:
 821 005e 00BF     		.align	2
 822              	.L49:
 823 0060 00700040 		.word	1073770496
 824 0064 00040140 		.word	1073808384
 825              		.cfi_endproc
 826              	.LFE129:
 828              		.section	.text.hal_pmu_lvd_stop_interrupt,"ax",%progbits
 829              		.align	1
 830              		.global	hal_pmu_lvd_stop_interrupt
 831              		.syntax unified
 832              		.thumb
 833              		.thumb_func
 834              		.fpu softvfp
 836              	hal_pmu_lvd_stop_interrupt:
 837              	.LFB130:
 416:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 417:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 418:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      stop PMU lvd with interrupt mode
 419:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  pmu_dev: PMU device information structure
 420:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure is not necessary to be reconfigured after structrue initialization,
 421:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                   the structure parameters altering is automatically configured by core
 422:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 423:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 424:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 425:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 426:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** int32_t hal_pmu_lvd_stop_interrupt(hal_pmu_dev_struct *pmu_dev)
 427:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 838              		.loc 1 427 1
 839              		.cfi_startproc
 840              		@ args = 0, pretend = 0, frame = 8
 841              		@ frame_needed = 1, uses_anonymous_args = 0
 842 0000 80B5     		push	{r7, lr}
 843              		.cfi_def_cfa_offset 8
 844              		.cfi_offset 7, -8
 845              		.cfi_offset 14, -4
 846 0002 82B0     		sub	sp, sp, #8
 847              		.cfi_def_cfa_offset 16
 848 0004 00AF     		add	r7, sp, #0
 849              		.cfi_def_cfa_register 7
 850 0006 7860     		str	r0, [r7, #4]
 428:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 429:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* check the parameters */
 430:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((NULL == pmu_dev)) {
 431:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("pointer [pmu_dev] address is invalid");
 432:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 433:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 = HAL_PARAMETER_CHECK */
 434:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     HAL_LOCK(pmu_dev);
 851              		.loc 1 434 5
 852 0008 7B68     		ldr	r3, [r7, #4]
 853 000a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 854 000c 012B     		cmp	r3, #1
 855 000e 02D1     		bne	.L52
 856              		.loc 1 434 5 is_stmt 0 discriminator 1
 857 0010 6FF00103 		mvn	r3, #1
 858 0014 19E0     		b	.L53
 859              	.L52:
 860              		.loc 1 434 5 discriminator 2
 861 0016 7B68     		ldr	r3, [r7, #4]
 862 0018 0122     		movs	r2, #1
 863 001a 9A71     		strb	r2, [r3, #6]
 435:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     EXTI_INTEN &= (uint32_t)~EXTI_INTEN_INTEN16;
 864              		.loc 1 435 16 is_stmt 1 discriminator 2
 865 001c 0D4B     		ldr	r3, .L54
 866 001e 1B68     		ldr	r3, [r3]
 867 0020 0C4A     		ldr	r2, .L54
 868 0022 23F48033 		bic	r3, r3, #65536
 869 0026 1360     		str	r3, [r2]
 436:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     pmu_dev->pmu_lvd_irq.pmu_lvd_handle = NULL;
 870              		.loc 1 436 41 discriminator 2
 871 0028 7B68     		ldr	r3, [r7, #4]
 872 002a 0022     		movs	r2, #0
 873 002c 1A60     		str	r2, [r3]
 437:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     hals_exti_interrupt_flag_clear(EXTI_LVD_16);
 874              		.loc 1 437 5 discriminator 2
 875 002e 4FF48030 		mov	r0, #65536
 876 0032 FFF7FEFF 		bl	hals_exti_interrupt_flag_clear
 438:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* disable LVD */
 439:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LVDEN;
 877              		.loc 1 439 13 discriminator 2
 878 0036 084B     		ldr	r3, .L54+4
 879 0038 1B68     		ldr	r3, [r3]
 880 003a 074A     		ldr	r2, .L54+4
 881 003c 23F01003 		bic	r3, r3, #16
 882 0040 1360     		str	r3, [r2]
 440:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     HAL_UNLOCK(pmu_dev);
 883              		.loc 1 440 5 discriminator 2
 884 0042 7B68     		ldr	r3, [r7, #4]
 885 0044 0022     		movs	r2, #0
 886 0046 9A71     		strb	r2, [r3, #6]
 441:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return HAL_ERR_NONE;
 887              		.loc 1 441 12 discriminator 2
 888 0048 0023     		movs	r3, #0
 889              	.L53:
 442:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 890              		.loc 1 442 1
 891 004a 1846     		mov	r0, r3
 892 004c 0837     		adds	r7, r7, #8
 893              		.cfi_def_cfa_offset 8
 894 004e BD46     		mov	sp, r7
 895              		.cfi_def_cfa_register 13
 896              		@ sp needed
 897 0050 80BD     		pop	{r7, pc}
 898              	.L55:
 899 0052 00BF     		.align	2
 900              	.L54:
 901 0054 00040140 		.word	1073808384
 902 0058 00700040 		.word	1073770496
 903              		.cfi_endproc
 904              	.LFE130:
 906              		.section	.text.hals_pmu_lvd_select,"ax",%progbits
 907              		.align	1
 908              		.global	hals_pmu_lvd_select
 909              		.syntax unified
 910              		.thumb
 911              		.thumb_func
 912              		.fpu softvfp
 914              	hals_pmu_lvd_select:
 915              	.LFB131:
 443:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 444:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 445:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      select low voltage detector threshold
 446:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  lvdt_n:
 447:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 448:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LVDT_0: voltage threshold is 2.1V
 449:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LVDT_1: voltage threshold is 2.3V
 450:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LVDT_2: voltage threshold is 2.4V
 451:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LVDT_3: voltage threshold is 2.6V
 452:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LVDT_4: voltage threshold is 2.7V
 453:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LVDT_5: voltage threshold is 2.9V
 454:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LVDT_6: voltage threshold is 3.0V
 455:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LVDT_7: voltage threshold is 3.1V
 456:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 457:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 458:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 459:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_lvd_select(uint32_t lvdt_n)
 460:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 916              		.loc 1 460 1
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 8
 919              		@ frame_needed = 1, uses_anonymous_args = 0
 920              		@ link register save eliminated.
 921 0000 80B4     		push	{r7}
 922              		.cfi_def_cfa_offset 4
 923              		.cfi_offset 7, -4
 924 0002 83B0     		sub	sp, sp, #12
 925              		.cfi_def_cfa_offset 16
 926 0004 00AF     		add	r7, sp, #0
 927              		.cfi_def_cfa_register 7
 928 0006 7860     		str	r0, [r7, #4]
 461:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* disable LVD */
 462:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LVDEN;
 929              		.loc 1 462 13
 930 0008 0B4B     		ldr	r3, .L57
 931 000a 1B68     		ldr	r3, [r3]
 932 000c 0A4A     		ldr	r2, .L57
 933 000e 23F01003 		bic	r3, r3, #16
 934 0012 1360     		str	r3, [r2]
 463:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* clear LVDT bits */
 464:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LVDT;
 935              		.loc 1 464 13
 936 0014 084B     		ldr	r3, .L57
 937 0016 1B68     		ldr	r3, [r3]
 938 0018 074A     		ldr	r2, .L57
 939 001a 23F0E003 		bic	r3, r3, #224
 940 001e 1360     		str	r3, [r2]
 465:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* set LVDT bits according to lvdt_n */
 466:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= lvdt_n;
 941              		.loc 1 466 13
 942 0020 054B     		ldr	r3, .L57
 943 0022 1A68     		ldr	r2, [r3]
 944 0024 0449     		ldr	r1, .L57
 945 0026 7B68     		ldr	r3, [r7, #4]
 946 0028 1343     		orrs	r3, r3, r2
 947 002a 0B60     		str	r3, [r1]
 467:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 948              		.loc 1 467 1
 949 002c 00BF     		nop
 950 002e 0C37     		adds	r7, r7, #12
 951              		.cfi_def_cfa_offset 4
 952 0030 BD46     		mov	sp, r7
 953              		.cfi_def_cfa_register 13
 954              		@ sp needed
 955 0032 80BC     		pop	{r7}
 956              		.cfi_restore 7
 957              		.cfi_def_cfa_offset 0
 958 0034 7047     		bx	lr
 959              	.L58:
 960 0036 00BF     		.align	2
 961              	.L57:
 962 0038 00700040 		.word	1073770496
 963              		.cfi_endproc
 964              	.LFE131:
 966              		.section	.text.hals_pmu_ldo_output_select,"ax",%progbits
 967              		.align	1
 968              		.global	hals_pmu_ldo_output_select
 969              		.syntax unified
 970              		.thumb
 971              		.thumb_func
 972              		.fpu softvfp
 974              	hals_pmu_ldo_output_select:
 975              	.LFB132:
 468:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 469:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 470:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      configure LDO output voltage
 471:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 these bits set by software when the main PLL closed
 472:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  ldo_output:
 473:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 474:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LDOVS_LOW: LDO output voltage low mode
 475:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LDOVS_MID: LDO output voltage mid mode
 476:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LDOVS_HIGH: LDO output voltage high mode
 477:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 478:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     error code: HAL_ERR_VAL, HAL_ERR_TIMEOUT, HAL_ERR_NONE,
 479:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 480:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_ldo_output_select(uint32_t ldo_output)
 481:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 976              		.loc 1 481 1
 977              		.cfi_startproc
 978              		@ args = 0, pretend = 0, frame = 8
 979              		@ frame_needed = 1, uses_anonymous_args = 0
 980              		@ link register save eliminated.
 981 0000 80B4     		push	{r7}
 982              		.cfi_def_cfa_offset 4
 983              		.cfi_offset 7, -4
 984 0002 83B0     		sub	sp, sp, #12
 985              		.cfi_def_cfa_offset 16
 986 0004 00AF     		add	r7, sp, #0
 987              		.cfi_def_cfa_register 7
 988 0006 7860     		str	r0, [r7, #4]
 482:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LDOVS;
 989              		.loc 1 482 13
 990 0008 084B     		ldr	r3, .L60
 991 000a 1B68     		ldr	r3, [r3]
 992 000c 074A     		ldr	r2, .L60
 993 000e 23F44043 		bic	r3, r3, #49152
 994 0012 1360     		str	r3, [r2]
 483:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= ldo_output;
 995              		.loc 1 483 13
 996 0014 054B     		ldr	r3, .L60
 997 0016 1A68     		ldr	r2, [r3]
 998 0018 0449     		ldr	r1, .L60
 999 001a 7B68     		ldr	r3, [r7, #4]
 1000 001c 1343     		orrs	r3, r3, r2
 1001 001e 0B60     		str	r3, [r1]
 484:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1002              		.loc 1 484 1
 1003 0020 00BF     		nop
 1004 0022 0C37     		adds	r7, r7, #12
 1005              		.cfi_def_cfa_offset 4
 1006 0024 BD46     		mov	sp, r7
 1007              		.cfi_def_cfa_register 13
 1008              		@ sp needed
 1009 0026 80BC     		pop	{r7}
 1010              		.cfi_restore 7
 1011              		.cfi_def_cfa_offset 0
 1012 0028 7047     		bx	lr
 1013              	.L61:
 1014 002a 00BF     		.align	2
 1015              	.L60:
 1016 002c 00700040 		.word	1073770496
 1017              		.cfi_endproc
 1018              	.LFE132:
 1020              		.section	.text.hals_pmu_lowdriver_mode_enable,"ax",%progbits
 1021              		.align	1
 1022              		.global	hals_pmu_lowdriver_mode_enable
 1023              		.syntax unified
 1024              		.thumb
 1025              		.thumb_func
 1026              		.fpu softvfp
 1028              	hals_pmu_lowdriver_mode_enable:
 1029              	.LFB133:
 485:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 486:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 487:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      enable low-driver mode in deep-sleep mode
 488:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 489:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 490:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 491:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 492:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_lowdriver_mode_enable(void)
 493:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1030              		.loc 1 493 1
 1031              		.cfi_startproc
 1032              		@ args = 0, pretend = 0, frame = 0
 1033              		@ frame_needed = 1, uses_anonymous_args = 0
 1034              		@ link register save eliminated.
 1035 0000 80B4     		push	{r7}
 1036              		.cfi_def_cfa_offset 4
 1037              		.cfi_offset 7, -4
 1038 0002 00AF     		add	r7, sp, #0
 1039              		.cfi_def_cfa_register 7
 494:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LDEN;
 1040              		.loc 1 494 13
 1041 0004 074B     		ldr	r3, .L63
 1042 0006 1B68     		ldr	r3, [r3]
 1043 0008 064A     		ldr	r2, .L63
 1044 000a 23F44023 		bic	r3, r3, #786432
 1045 000e 1360     		str	r3, [r2]
 495:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= PMU_LOWDRIVER_ENABLE;
 1046              		.loc 1 495 13
 1047 0010 044B     		ldr	r3, .L63
 1048 0012 1B68     		ldr	r3, [r3]
 1049 0014 034A     		ldr	r2, .L63
 1050 0016 43F44023 		orr	r3, r3, #786432
 1051 001a 1360     		str	r3, [r2]
 496:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1052              		.loc 1 496 1
 1053 001c 00BF     		nop
 1054 001e BD46     		mov	sp, r7
 1055              		.cfi_def_cfa_register 13
 1056              		@ sp needed
 1057 0020 80BC     		pop	{r7}
 1058              		.cfi_restore 7
 1059              		.cfi_def_cfa_offset 0
 1060 0022 7047     		bx	lr
 1061              	.L64:
 1062              		.align	2
 1063              	.L63:
 1064 0024 00700040 		.word	1073770496
 1065              		.cfi_endproc
 1066              	.LFE133:
 1068              		.section	.text.hals_pmu_lowdriver_mode_disable,"ax",%progbits
 1069              		.align	1
 1070              		.global	hals_pmu_lowdriver_mode_disable
 1071              		.syntax unified
 1072              		.thumb
 1073              		.thumb_func
 1074              		.fpu softvfp
 1076              	hals_pmu_lowdriver_mode_disable:
 1077              	.LFB134:
 497:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 498:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 499:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      disable low-driver mode in deep-sleep mode
 500:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 501:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 502:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 503:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 504:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_lowdriver_mode_disable(void)
 505:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1078              		.loc 1 505 1
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 0
 1081              		@ frame_needed = 1, uses_anonymous_args = 0
 1082              		@ link register save eliminated.
 1083 0000 80B4     		push	{r7}
 1084              		.cfi_def_cfa_offset 4
 1085              		.cfi_offset 7, -4
 1086 0002 00AF     		add	r7, sp, #0
 1087              		.cfi_def_cfa_register 7
 506:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LDEN;
 1088              		.loc 1 506 13
 1089 0004 064B     		ldr	r3, .L66
 1090 0006 1B68     		ldr	r3, [r3]
 1091 0008 054A     		ldr	r2, .L66
 1092 000a 23F44023 		bic	r3, r3, #786432
 1093 000e 1360     		str	r3, [r2]
 507:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= PMU_LOWDRIVER_DISABLE;
 1094              		.loc 1 507 13
 1095 0010 034B     		ldr	r3, .L66
 1096 0012 034A     		ldr	r2, .L66
 1097 0014 1B68     		ldr	r3, [r3]
 1098 0016 1360     		str	r3, [r2]
 508:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1099              		.loc 1 508 1
 1100 0018 00BF     		nop
 1101 001a BD46     		mov	sp, r7
 1102              		.cfi_def_cfa_register 13
 1103              		@ sp needed
 1104 001c 80BC     		pop	{r7}
 1105              		.cfi_restore 7
 1106              		.cfi_def_cfa_offset 0
 1107 001e 7047     		bx	lr
 1108              	.L67:
 1109              		.align	2
 1110              	.L66:
 1111 0020 00700040 		.word	1073770496
 1112              		.cfi_endproc
 1113              	.LFE134:
 1115              		.section	.text.hals_pmu_highdriver_mode_enable,"ax",%progbits
 1116              		.align	1
 1117              		.global	hals_pmu_highdriver_mode_enable
 1118              		.syntax unified
 1119              		.thumb
 1120              		.thumb_func
 1121              		.fpu softvfp
 1123              	hals_pmu_highdriver_mode_enable:
 1124              	.LFB135:
 509:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 510:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 511:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      enable high-driver mode
 512:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 this bit set by software only when IRC8M or HXTAL used as system clock
 513:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 514:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 515:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 516:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 517:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_highdriver_mode_enable(void)
 518:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1125              		.loc 1 518 1
 1126              		.cfi_startproc
 1127              		@ args = 0, pretend = 0, frame = 0
 1128              		@ frame_needed = 1, uses_anonymous_args = 0
 1129              		@ link register save eliminated.
 1130 0000 80B4     		push	{r7}
 1131              		.cfi_def_cfa_offset 4
 1132              		.cfi_offset 7, -4
 1133 0002 00AF     		add	r7, sp, #0
 1134              		.cfi_def_cfa_register 7
 519:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= PMU_CTL_HDEN;
 1135              		.loc 1 519 13
 1136 0004 044B     		ldr	r3, .L69
 1137 0006 1B68     		ldr	r3, [r3]
 1138 0008 034A     		ldr	r2, .L69
 1139 000a 43F48033 		orr	r3, r3, #65536
 1140 000e 1360     		str	r3, [r2]
 520:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1141              		.loc 1 520 1
 1142 0010 00BF     		nop
 1143 0012 BD46     		mov	sp, r7
 1144              		.cfi_def_cfa_register 13
 1145              		@ sp needed
 1146 0014 80BC     		pop	{r7}
 1147              		.cfi_restore 7
 1148              		.cfi_def_cfa_offset 0
 1149 0016 7047     		bx	lr
 1150              	.L70:
 1151              		.align	2
 1152              	.L69:
 1153 0018 00700040 		.word	1073770496
 1154              		.cfi_endproc
 1155              	.LFE135:
 1157              		.section	.text.hals_pmu_highdriver_mode_disable,"ax",%progbits
 1158              		.align	1
 1159              		.global	hals_pmu_highdriver_mode_disable
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1163              		.fpu softvfp
 1165              	hals_pmu_highdriver_mode_disable:
 1166              	.LFB136:
 521:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 522:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 523:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      disable high-driver mode
 524:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 525:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 526:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 527:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 528:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_highdriver_mode_disable(void)
 529:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1167              		.loc 1 529 1
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 1, uses_anonymous_args = 0
 1171              		@ link register save eliminated.
 1172 0000 80B4     		push	{r7}
 1173              		.cfi_def_cfa_offset 4
 1174              		.cfi_offset 7, -4
 1175 0002 00AF     		add	r7, sp, #0
 1176              		.cfi_def_cfa_register 7
 530:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_HDEN;
 1177              		.loc 1 530 13
 1178 0004 044B     		ldr	r3, .L72
 1179 0006 1B68     		ldr	r3, [r3]
 1180 0008 034A     		ldr	r2, .L72
 1181 000a 23F48033 		bic	r3, r3, #65536
 1182 000e 1360     		str	r3, [r2]
 531:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1183              		.loc 1 531 1
 1184 0010 00BF     		nop
 1185 0012 BD46     		mov	sp, r7
 1186              		.cfi_def_cfa_register 13
 1187              		@ sp needed
 1188 0014 80BC     		pop	{r7}
 1189              		.cfi_restore 7
 1190              		.cfi_def_cfa_offset 0
 1191 0016 7047     		bx	lr
 1192              	.L73:
 1193              		.align	2
 1194              	.L72:
 1195 0018 00700040 		.word	1073770496
 1196              		.cfi_endproc
 1197              	.LFE136:
 1199              		.section	.text.hals_pmu_highdriver_switch_select,"ax",%progbits
 1200              		.align	1
 1201              		.global	hals_pmu_highdriver_switch_select
 1202              		.syntax unified
 1203              		.thumb
 1204              		.thumb_func
 1205              		.fpu softvfp
 1207              	hals_pmu_highdriver_switch_select:
 1208              	.LFB137:
 532:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 533:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 534:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      switch high-driver mode
 535:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 this bit set by software only when IRC8M or HXTAL used as system clock
 536:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  highdr_switch:
 537:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 538:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_HIGHDR_SWITCH_NONE: disable high-driver mode switch
 539:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_HIGHDR_SWITCH_EN: enable high-driver mode switch
 540:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 541:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 542:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 543:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_highdriver_switch_select(uint32_t highdr_switch)
 544:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1209              		.loc 1 544 1
 1210              		.cfi_startproc
 1211              		@ args = 0, pretend = 0, frame = 8
 1212              		@ frame_needed = 1, uses_anonymous_args = 0
 1213 0000 80B5     		push	{r7, lr}
 1214              		.cfi_def_cfa_offset 8
 1215              		.cfi_offset 7, -8
 1216              		.cfi_offset 14, -4
 1217 0002 82B0     		sub	sp, sp, #8
 1218              		.cfi_def_cfa_offset 16
 1219 0004 00AF     		add	r7, sp, #0
 1220              		.cfi_def_cfa_register 7
 1221 0006 7860     		str	r0, [r7, #4]
 545:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* wait for HDRF flag to be set */
 546:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     while(SET != hals_pmu_flag_get(PMU_FLAG_HDR)) {
 1222              		.loc 1 546 10
 1223 0008 00BF     		nop
 1224              	.L75:
 1225              		.loc 1 546 18 discriminator 1
 1226 000a 4FF48030 		mov	r0, #65536
 1227 000e FFF7FEFF 		bl	hals_pmu_flag_get
 1228 0012 0346     		mov	r3, r0
 1229              		.loc 1 546 10 discriminator 1
 1230 0014 012B     		cmp	r3, #1
 1231 0016 F8D1     		bne	.L75
 547:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 548:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_HDS;
 1232              		.loc 1 548 13
 1233 0018 074B     		ldr	r3, .L76
 1234 001a 1B68     		ldr	r3, [r3]
 1235 001c 064A     		ldr	r2, .L76
 1236 001e 23F40033 		bic	r3, r3, #131072
 1237 0022 1360     		str	r3, [r2]
 549:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= highdr_switch;
 1238              		.loc 1 549 13
 1239 0024 044B     		ldr	r3, .L76
 1240 0026 1A68     		ldr	r2, [r3]
 1241 0028 0349     		ldr	r1, .L76
 1242 002a 7B68     		ldr	r3, [r7, #4]
 1243 002c 1343     		orrs	r3, r3, r2
 1244 002e 0B60     		str	r3, [r1]
 550:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1245              		.loc 1 550 1
 1246 0030 00BF     		nop
 1247 0032 0837     		adds	r7, r7, #8
 1248              		.cfi_def_cfa_offset 8
 1249 0034 BD46     		mov	sp, r7
 1250              		.cfi_def_cfa_register 13
 1251              		@ sp needed
 1252 0036 80BD     		pop	{r7, pc}
 1253              	.L77:
 1254              		.align	2
 1255              	.L76:
 1256 0038 00700040 		.word	1073770496
 1257              		.cfi_endproc
 1258              	.LFE137:
 1260              		.section	.text.hals_pmu_lowpower_driver_config,"ax",%progbits
 1261              		.align	1
 1262              		.global	hals_pmu_lowpower_driver_config
 1263              		.syntax unified
 1264              		.thumb
 1265              		.thumb_func
 1266              		.fpu softvfp
 1268              	hals_pmu_lowpower_driver_config:
 1269              	.LFB138:
 551:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 552:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 553:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      low-driver mode when use low power LDO
 554:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  mode:
 555:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 556:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_NORMALDR_LOWPWR: normal-driver when use low power LDO
 557:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LOWDR_LOWPWR: low-driver mode enabled when LDEN is 11 and use low power LDO
 558:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 559:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 560:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 561:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_lowpower_driver_config(uint32_t mode)
 562:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1270              		.loc 1 562 1
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 8
 1273              		@ frame_needed = 1, uses_anonymous_args = 0
 1274              		@ link register save eliminated.
 1275 0000 80B4     		push	{r7}
 1276              		.cfi_def_cfa_offset 4
 1277              		.cfi_offset 7, -4
 1278 0002 83B0     		sub	sp, sp, #12
 1279              		.cfi_def_cfa_offset 16
 1280 0004 00AF     		add	r7, sp, #0
 1281              		.cfi_def_cfa_register 7
 1282 0006 7860     		str	r0, [r7, #4]
 563:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LDLP;
 1283              		.loc 1 563 13
 1284 0008 084B     		ldr	r3, .L79
 1285 000a 1B68     		ldr	r3, [r3]
 1286 000c 074A     		ldr	r2, .L79
 1287 000e 23F48063 		bic	r3, r3, #1024
 1288 0012 1360     		str	r3, [r2]
 564:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= mode;
 1289              		.loc 1 564 13
 1290 0014 054B     		ldr	r3, .L79
 1291 0016 1A68     		ldr	r2, [r3]
 1292 0018 0449     		ldr	r1, .L79
 1293 001a 7B68     		ldr	r3, [r7, #4]
 1294 001c 1343     		orrs	r3, r3, r2
 1295 001e 0B60     		str	r3, [r1]
 565:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1296              		.loc 1 565 1
 1297 0020 00BF     		nop
 1298 0022 0C37     		adds	r7, r7, #12
 1299              		.cfi_def_cfa_offset 4
 1300 0024 BD46     		mov	sp, r7
 1301              		.cfi_def_cfa_register 13
 1302              		@ sp needed
 1303 0026 80BC     		pop	{r7}
 1304              		.cfi_restore 7
 1305              		.cfi_def_cfa_offset 0
 1306 0028 7047     		bx	lr
 1307              	.L80:
 1308 002a 00BF     		.align	2
 1309              	.L79:
 1310 002c 00700040 		.word	1073770496
 1311              		.cfi_endproc
 1312              	.LFE138:
 1314              		.section	.text.hals_pmu_normalpower_driver_config,"ax",%progbits
 1315              		.align	1
 1316              		.global	hals_pmu_normalpower_driver_config
 1317              		.syntax unified
 1318              		.thumb
 1319              		.thumb_func
 1320              		.fpu softvfp
 1322              	hals_pmu_normalpower_driver_config:
 1323              	.LFB139:
 566:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 567:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 568:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      low-driver mode when use normal power LDO
 569:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  mode:
 570:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 571:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_NORMALDR_NORMALPWR: normal-driver when use low power LDO
 572:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LOWDR_NORMALPWR: low-driver mode enabled when LDEN is 11 and use low power LD
 573:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 574:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 575:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 576:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_normalpower_driver_config(uint32_t mode)
 577:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1324              		.loc 1 577 1
 1325              		.cfi_startproc
 1326              		@ args = 0, pretend = 0, frame = 8
 1327              		@ frame_needed = 1, uses_anonymous_args = 0
 1328              		@ link register save eliminated.
 1329 0000 80B4     		push	{r7}
 1330              		.cfi_def_cfa_offset 4
 1331              		.cfi_offset 7, -4
 1332 0002 83B0     		sub	sp, sp, #12
 1333              		.cfi_def_cfa_offset 16
 1334 0004 00AF     		add	r7, sp, #0
 1335              		.cfi_def_cfa_register 7
 1336 0006 7860     		str	r0, [r7, #4]
 578:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_LDNP;
 1337              		.loc 1 578 13
 1338 0008 084B     		ldr	r3, .L82
 1339 000a 1B68     		ldr	r3, [r3]
 1340 000c 074A     		ldr	r2, .L82
 1341 000e 23F40063 		bic	r3, r3, #2048
 1342 0012 1360     		str	r3, [r2]
 579:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= mode;
 1343              		.loc 1 579 13
 1344 0014 054B     		ldr	r3, .L82
 1345 0016 1A68     		ldr	r2, [r3]
 1346 0018 0449     		ldr	r1, .L82
 1347 001a 7B68     		ldr	r3, [r7, #4]
 1348 001c 1343     		orrs	r3, r3, r2
 1349 001e 0B60     		str	r3, [r1]
 580:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1350              		.loc 1 580 1
 1351 0020 00BF     		nop
 1352 0022 0C37     		adds	r7, r7, #12
 1353              		.cfi_def_cfa_offset 4
 1354 0024 BD46     		mov	sp, r7
 1355              		.cfi_def_cfa_register 13
 1356              		@ sp needed
 1357 0026 80BC     		pop	{r7}
 1358              		.cfi_restore 7
 1359              		.cfi_def_cfa_offset 0
 1360 0028 7047     		bx	lr
 1361              	.L83:
 1362 002a 00BF     		.align	2
 1363              	.L82:
 1364 002c 00700040 		.word	1073770496
 1365              		.cfi_endproc
 1366              	.LFE139:
 1368              		.section	.text.hals_pmu_to_sleepmode,"ax",%progbits
 1369              		.align	1
 1370              		.global	hals_pmu_to_sleepmode
 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1374              		.fpu softvfp
 1376              	hals_pmu_to_sleepmode:
 1377              	.LFB140:
 581:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 582:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 583:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      PMU work at sleep mode
 584:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  sleepmodecmd:
 585:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 586:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        WFI_CMD: use WFI command
 587:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        WFE_CMD: use WFE command
 588:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 589:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 590:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 591:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_to_sleepmode(uint8_t sleepmodecmd)
 592:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1378              		.loc 1 592 1
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 8
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 1383 0000 80B4     		push	{r7}
 1384              		.cfi_def_cfa_offset 4
 1385              		.cfi_offset 7, -4
 1386 0002 83B0     		sub	sp, sp, #12
 1387              		.cfi_def_cfa_offset 16
 1388 0004 00AF     		add	r7, sp, #0
 1389              		.cfi_def_cfa_register 7
 1390 0006 0346     		mov	r3, r0
 1391 0008 FB71     		strb	r3, [r7, #7]
 593:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 594:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((WFI_CMD != sleepmodecmd) && (WFE_CMD != sleepmodecmd)) {
 595:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("parameter [sleepmodecmd] value is invalid");
 596:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return;
 597:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 598:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 == HAL_PARAMETER_CHECK */
 599:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* clear sleepdeep bit of Cortex-M4 system control register */
 600:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     SCB->SCR &= ~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 1392              		.loc 1 600 14
 1393 000a 094B     		ldr	r3, .L87
 1394 000c 1B69     		ldr	r3, [r3, #16]
 1395 000e 084A     		ldr	r2, .L87
 1396 0010 23F00403 		bic	r3, r3, #4
 1397 0014 1361     		str	r3, [r2, #16]
 601:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 602:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* select WFI or WFE command to enter sleep mode */
 603:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(WFI_CMD == sleepmodecmd) {
 1398              		.loc 1 603 7
 1399 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1400 0018 002B     		cmp	r3, #0
 1401 001a 01D1     		bne	.L85
 1402              	.LBB16:
 1403              	.LBB17:
 1404              		.file 2 "../firmware/cmsis/inc/core_cmInstr.h"
   1:../firmware/cmsis/inc/core_cmInstr.h **** /**************************************************************************//**
   2:../firmware/cmsis/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:../firmware/cmsis/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:../firmware/cmsis/inc/core_cmInstr.h ****  * @version  V3.01
   5:../firmware/cmsis/inc/core_cmInstr.h ****  * @date     06. March 2012
   6:../firmware/cmsis/inc/core_cmInstr.h ****  *
   7:../firmware/cmsis/inc/core_cmInstr.h ****  * @note
   8:../firmware/cmsis/inc/core_cmInstr.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:../firmware/cmsis/inc/core_cmInstr.h ****  *
  10:../firmware/cmsis/inc/core_cmInstr.h ****  * @par
  11:../firmware/cmsis/inc/core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:../firmware/cmsis/inc/core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:../firmware/cmsis/inc/core_cmInstr.h ****  * within development tools that are supporting such ARM based processors.
  14:../firmware/cmsis/inc/core_cmInstr.h ****  *
  15:../firmware/cmsis/inc/core_cmInstr.h ****  * @par
  16:../firmware/cmsis/inc/core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../firmware/cmsis/inc/core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../firmware/cmsis/inc/core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../firmware/cmsis/inc/core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../firmware/cmsis/inc/core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../firmware/cmsis/inc/core_cmInstr.h ****  *
  22:../firmware/cmsis/inc/core_cmInstr.h ****  ******************************************************************************/
  23:../firmware/cmsis/inc/core_cmInstr.h **** 
  24:../firmware/cmsis/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:../firmware/cmsis/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:../firmware/cmsis/inc/core_cmInstr.h **** 
  27:../firmware/cmsis/inc/core_cmInstr.h **** 
  28:../firmware/cmsis/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:../firmware/cmsis/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:../firmware/cmsis/inc/core_cmInstr.h ****   Access to dedicated instructions
  31:../firmware/cmsis/inc/core_cmInstr.h ****   @{
  32:../firmware/cmsis/inc/core_cmInstr.h **** */
  33:../firmware/cmsis/inc/core_cmInstr.h **** 
  34:../firmware/cmsis/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:../firmware/cmsis/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  36:../firmware/cmsis/inc/core_cmInstr.h **** 
  37:../firmware/cmsis/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:../firmware/cmsis/inc/core_cmInstr.h **** #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:../firmware/cmsis/inc/core_cmInstr.h **** #endif
  40:../firmware/cmsis/inc/core_cmInstr.h **** 
  41:../firmware/cmsis/inc/core_cmInstr.h **** 
  42:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  No Operation
  43:../firmware/cmsis/inc/core_cmInstr.h **** 
  44:../firmware/cmsis/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:../firmware/cmsis/inc/core_cmInstr.h ****  */
  46:../firmware/cmsis/inc/core_cmInstr.h **** #define __NOP                             __nop
  47:../firmware/cmsis/inc/core_cmInstr.h **** 
  48:../firmware/cmsis/inc/core_cmInstr.h **** 
  49:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:../firmware/cmsis/inc/core_cmInstr.h **** 
  51:../firmware/cmsis/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:../firmware/cmsis/inc/core_cmInstr.h ****     until one of a number of events occurs.
  53:../firmware/cmsis/inc/core_cmInstr.h ****  */
  54:../firmware/cmsis/inc/core_cmInstr.h **** #define __WFI                             __wfi
  55:../firmware/cmsis/inc/core_cmInstr.h **** 
  56:../firmware/cmsis/inc/core_cmInstr.h **** 
  57:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Wait For Event
  58:../firmware/cmsis/inc/core_cmInstr.h **** 
  59:../firmware/cmsis/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:../firmware/cmsis/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:../firmware/cmsis/inc/core_cmInstr.h ****  */
  62:../firmware/cmsis/inc/core_cmInstr.h **** #define __WFE                             __wfe
  63:../firmware/cmsis/inc/core_cmInstr.h **** 
  64:../firmware/cmsis/inc/core_cmInstr.h **** 
  65:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Send Event
  66:../firmware/cmsis/inc/core_cmInstr.h **** 
  67:../firmware/cmsis/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:../firmware/cmsis/inc/core_cmInstr.h ****  */
  69:../firmware/cmsis/inc/core_cmInstr.h **** #define __SEV                             __sev
  70:../firmware/cmsis/inc/core_cmInstr.h **** 
  71:../firmware/cmsis/inc/core_cmInstr.h **** 
  72:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:../firmware/cmsis/inc/core_cmInstr.h **** 
  74:../firmware/cmsis/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  75:../firmware/cmsis/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  76:../firmware/cmsis/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  77:../firmware/cmsis/inc/core_cmInstr.h ****  */
  78:../firmware/cmsis/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:../firmware/cmsis/inc/core_cmInstr.h **** 
  80:../firmware/cmsis/inc/core_cmInstr.h **** 
  81:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:../firmware/cmsis/inc/core_cmInstr.h **** 
  83:../firmware/cmsis/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  84:../firmware/cmsis/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:../firmware/cmsis/inc/core_cmInstr.h ****  */
  86:../firmware/cmsis/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:../firmware/cmsis/inc/core_cmInstr.h **** 
  88:../firmware/cmsis/inc/core_cmInstr.h **** 
  89:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:../firmware/cmsis/inc/core_cmInstr.h **** 
  91:../firmware/cmsis/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
  92:../firmware/cmsis/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:../firmware/cmsis/inc/core_cmInstr.h ****  */
  94:../firmware/cmsis/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:../firmware/cmsis/inc/core_cmInstr.h **** 
  96:../firmware/cmsis/inc/core_cmInstr.h **** 
  97:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:../firmware/cmsis/inc/core_cmInstr.h **** 
  99:../firmware/cmsis/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:../firmware/cmsis/inc/core_cmInstr.h **** 
 101:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:../firmware/cmsis/inc/core_cmInstr.h ****     \return               Reversed value
 103:../firmware/cmsis/inc/core_cmInstr.h ****  */
 104:../firmware/cmsis/inc/core_cmInstr.h **** #define __REV                             __rev
 105:../firmware/cmsis/inc/core_cmInstr.h **** 
 106:../firmware/cmsis/inc/core_cmInstr.h **** 
 107:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:../firmware/cmsis/inc/core_cmInstr.h **** 
 109:../firmware/cmsis/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:../firmware/cmsis/inc/core_cmInstr.h **** 
 111:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:../firmware/cmsis/inc/core_cmInstr.h ****     \return               Reversed value
 113:../firmware/cmsis/inc/core_cmInstr.h ****  */
 114:../firmware/cmsis/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 115:../firmware/cmsis/inc/core_cmInstr.h **** {
 116:../firmware/cmsis/inc/core_cmInstr.h ****     rev16 r0, r0
 117:../firmware/cmsis/inc/core_cmInstr.h ****     bx lr
 118:../firmware/cmsis/inc/core_cmInstr.h **** }
 119:../firmware/cmsis/inc/core_cmInstr.h **** 
 120:../firmware/cmsis/inc/core_cmInstr.h **** 
 121:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:../firmware/cmsis/inc/core_cmInstr.h **** 
 123:../firmware/cmsis/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:../firmware/cmsis/inc/core_cmInstr.h **** 
 125:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:../firmware/cmsis/inc/core_cmInstr.h ****     \return               Reversed value
 127:../firmware/cmsis/inc/core_cmInstr.h ****  */
 128:../firmware/cmsis/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 129:../firmware/cmsis/inc/core_cmInstr.h **** {
 130:../firmware/cmsis/inc/core_cmInstr.h ****     revsh r0, r0
 131:../firmware/cmsis/inc/core_cmInstr.h ****     bx lr
 132:../firmware/cmsis/inc/core_cmInstr.h **** }
 133:../firmware/cmsis/inc/core_cmInstr.h **** 
 134:../firmware/cmsis/inc/core_cmInstr.h **** 
 135:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 136:../firmware/cmsis/inc/core_cmInstr.h **** 
 137:../firmware/cmsis/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 138:../firmware/cmsis/inc/core_cmInstr.h **** 
 139:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 140:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 141:../firmware/cmsis/inc/core_cmInstr.h ****     \return               Rotated value
 142:../firmware/cmsis/inc/core_cmInstr.h ****  */
 143:../firmware/cmsis/inc/core_cmInstr.h **** #define __ROR                             __ror
 144:../firmware/cmsis/inc/core_cmInstr.h **** 
 145:../firmware/cmsis/inc/core_cmInstr.h **** 
 146:../firmware/cmsis/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 147:../firmware/cmsis/inc/core_cmInstr.h **** 
 148:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 149:../firmware/cmsis/inc/core_cmInstr.h **** 
 150:../firmware/cmsis/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 151:../firmware/cmsis/inc/core_cmInstr.h **** 
 152:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 153:../firmware/cmsis/inc/core_cmInstr.h ****     \return               Reversed value
 154:../firmware/cmsis/inc/core_cmInstr.h ****  */
 155:../firmware/cmsis/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 156:../firmware/cmsis/inc/core_cmInstr.h **** 
 157:../firmware/cmsis/inc/core_cmInstr.h **** 
 158:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 159:../firmware/cmsis/inc/core_cmInstr.h **** 
 160:../firmware/cmsis/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 161:../firmware/cmsis/inc/core_cmInstr.h **** 
 162:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 163:../firmware/cmsis/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 164:../firmware/cmsis/inc/core_cmInstr.h ****  */
 165:../firmware/cmsis/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 166:../firmware/cmsis/inc/core_cmInstr.h **** 
 167:../firmware/cmsis/inc/core_cmInstr.h **** 
 168:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 169:../firmware/cmsis/inc/core_cmInstr.h **** 
 170:../firmware/cmsis/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 171:../firmware/cmsis/inc/core_cmInstr.h **** 
 172:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 173:../firmware/cmsis/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 174:../firmware/cmsis/inc/core_cmInstr.h ****  */
 175:../firmware/cmsis/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 176:../firmware/cmsis/inc/core_cmInstr.h **** 
 177:../firmware/cmsis/inc/core_cmInstr.h **** 
 178:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 179:../firmware/cmsis/inc/core_cmInstr.h **** 
 180:../firmware/cmsis/inc/core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 181:../firmware/cmsis/inc/core_cmInstr.h **** 
 182:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 183:../firmware/cmsis/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 184:../firmware/cmsis/inc/core_cmInstr.h ****  */
 185:../firmware/cmsis/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 186:../firmware/cmsis/inc/core_cmInstr.h **** 
 187:../firmware/cmsis/inc/core_cmInstr.h **** 
 188:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 189:../firmware/cmsis/inc/core_cmInstr.h **** 
 190:../firmware/cmsis/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 191:../firmware/cmsis/inc/core_cmInstr.h **** 
 192:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 193:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 194:../firmware/cmsis/inc/core_cmInstr.h ****     \return          0  Function succeeded
 195:../firmware/cmsis/inc/core_cmInstr.h ****     \return          1  Function failed
 196:../firmware/cmsis/inc/core_cmInstr.h ****  */
 197:../firmware/cmsis/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 198:../firmware/cmsis/inc/core_cmInstr.h **** 
 199:../firmware/cmsis/inc/core_cmInstr.h **** 
 200:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 201:../firmware/cmsis/inc/core_cmInstr.h **** 
 202:../firmware/cmsis/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 203:../firmware/cmsis/inc/core_cmInstr.h **** 
 204:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 205:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 206:../firmware/cmsis/inc/core_cmInstr.h ****     \return          0  Function succeeded
 207:../firmware/cmsis/inc/core_cmInstr.h ****     \return          1  Function failed
 208:../firmware/cmsis/inc/core_cmInstr.h ****  */
 209:../firmware/cmsis/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 210:../firmware/cmsis/inc/core_cmInstr.h **** 
 211:../firmware/cmsis/inc/core_cmInstr.h **** 
 212:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 213:../firmware/cmsis/inc/core_cmInstr.h **** 
 214:../firmware/cmsis/inc/core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 215:../firmware/cmsis/inc/core_cmInstr.h **** 
 216:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 217:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 218:../firmware/cmsis/inc/core_cmInstr.h ****     \return          0  Function succeeded
 219:../firmware/cmsis/inc/core_cmInstr.h ****     \return          1  Function failed
 220:../firmware/cmsis/inc/core_cmInstr.h ****  */
 221:../firmware/cmsis/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 222:../firmware/cmsis/inc/core_cmInstr.h **** 
 223:../firmware/cmsis/inc/core_cmInstr.h **** 
 224:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 225:../firmware/cmsis/inc/core_cmInstr.h **** 
 226:../firmware/cmsis/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 227:../firmware/cmsis/inc/core_cmInstr.h **** 
 228:../firmware/cmsis/inc/core_cmInstr.h ****  */
 229:../firmware/cmsis/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 230:../firmware/cmsis/inc/core_cmInstr.h **** 
 231:../firmware/cmsis/inc/core_cmInstr.h **** 
 232:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 233:../firmware/cmsis/inc/core_cmInstr.h **** 
 234:../firmware/cmsis/inc/core_cmInstr.h ****     This function saturates a signed value.
 235:../firmware/cmsis/inc/core_cmInstr.h **** 
 236:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 238:../firmware/cmsis/inc/core_cmInstr.h ****     \return             Saturated value
 239:../firmware/cmsis/inc/core_cmInstr.h ****  */
 240:../firmware/cmsis/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 241:../firmware/cmsis/inc/core_cmInstr.h **** 
 242:../firmware/cmsis/inc/core_cmInstr.h **** 
 243:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 244:../firmware/cmsis/inc/core_cmInstr.h **** 
 245:../firmware/cmsis/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 246:../firmware/cmsis/inc/core_cmInstr.h **** 
 247:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 248:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 249:../firmware/cmsis/inc/core_cmInstr.h ****     \return             Saturated value
 250:../firmware/cmsis/inc/core_cmInstr.h ****  */
 251:../firmware/cmsis/inc/core_cmInstr.h **** #define __USAT                            __usat
 252:../firmware/cmsis/inc/core_cmInstr.h **** 
 253:../firmware/cmsis/inc/core_cmInstr.h **** 
 254:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 255:../firmware/cmsis/inc/core_cmInstr.h **** 
 256:../firmware/cmsis/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 257:../firmware/cmsis/inc/core_cmInstr.h **** 
 258:../firmware/cmsis/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 259:../firmware/cmsis/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 260:../firmware/cmsis/inc/core_cmInstr.h ****  */
 261:../firmware/cmsis/inc/core_cmInstr.h **** #define __CLZ                             __clz
 262:../firmware/cmsis/inc/core_cmInstr.h **** 
 263:../firmware/cmsis/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 264:../firmware/cmsis/inc/core_cmInstr.h **** 
 265:../firmware/cmsis/inc/core_cmInstr.h **** 
 266:../firmware/cmsis/inc/core_cmInstr.h **** 
 267:../firmware/cmsis/inc/core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 268:../firmware/cmsis/inc/core_cmInstr.h **** /* IAR iccarm specific functions */
 269:../firmware/cmsis/inc/core_cmInstr.h **** 
 270:../firmware/cmsis/inc/core_cmInstr.h **** #include <cmsis_iar.h>
 271:../firmware/cmsis/inc/core_cmInstr.h **** 
 272:../firmware/cmsis/inc/core_cmInstr.h **** 
 273:../firmware/cmsis/inc/core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 274:../firmware/cmsis/inc/core_cmInstr.h **** /* TI CCS specific functions */
 275:../firmware/cmsis/inc/core_cmInstr.h **** 
 276:../firmware/cmsis/inc/core_cmInstr.h **** #include <cmsis_ccs.h>
 277:../firmware/cmsis/inc/core_cmInstr.h **** 
 278:../firmware/cmsis/inc/core_cmInstr.h **** 
 279:../firmware/cmsis/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 280:../firmware/cmsis/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 281:../firmware/cmsis/inc/core_cmInstr.h **** 
 282:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  No Operation
 283:../firmware/cmsis/inc/core_cmInstr.h **** 
 284:../firmware/cmsis/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 285:../firmware/cmsis/inc/core_cmInstr.h ****  */
 286:../firmware/cmsis/inc/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
 287:../firmware/cmsis/inc/core_cmInstr.h **** {
 288:../firmware/cmsis/inc/core_cmInstr.h ****     __ASM volatile("nop");
 289:../firmware/cmsis/inc/core_cmInstr.h **** }
 290:../firmware/cmsis/inc/core_cmInstr.h **** 
 291:../firmware/cmsis/inc/core_cmInstr.h **** 
 292:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 293:../firmware/cmsis/inc/core_cmInstr.h **** 
 294:../firmware/cmsis/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 295:../firmware/cmsis/inc/core_cmInstr.h ****     until one of a number of events occurs.
 296:../firmware/cmsis/inc/core_cmInstr.h ****  */
 297:../firmware/cmsis/inc/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFI(void)
 298:../firmware/cmsis/inc/core_cmInstr.h **** {
 299:../firmware/cmsis/inc/core_cmInstr.h ****     __ASM volatile("wfi");
 1405              		.loc 2 299 5
 1406              		.syntax unified
 1407              	@ 299 "../firmware/cmsis/inc/core_cmInstr.h" 1
 1408 001c 30BF     		wfi
 1409              	@ 0 "" 2
 300:../firmware/cmsis/inc/core_cmInstr.h **** }
 1410              		.loc 2 300 1
 1411              		.thumb
 1412              		.syntax unified
 1413 001e 01E0     		b	.L86
 1414              	.L85:
 1415              	.LBE17:
 1416              	.LBE16:
 1417              	.LBB18:
 1418              	.LBB19:
 301:../firmware/cmsis/inc/core_cmInstr.h **** 
 302:../firmware/cmsis/inc/core_cmInstr.h **** 
 303:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Wait For Event
 304:../firmware/cmsis/inc/core_cmInstr.h **** 
 305:../firmware/cmsis/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 306:../firmware/cmsis/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 307:../firmware/cmsis/inc/core_cmInstr.h ****  */
 308:../firmware/cmsis/inc/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
 309:../firmware/cmsis/inc/core_cmInstr.h **** {
 310:../firmware/cmsis/inc/core_cmInstr.h ****     __ASM volatile("wfe");
 1419              		.loc 2 310 5
 1420              		.syntax unified
 1421              	@ 310 "../firmware/cmsis/inc/core_cmInstr.h" 1
 1422 0020 20BF     		wfe
 1423              	@ 0 "" 2
 311:../firmware/cmsis/inc/core_cmInstr.h **** }
 1424              		.loc 2 311 1
 1425              		.thumb
 1426              		.syntax unified
 1427 0022 00BF     		nop
 1428              	.L86:
 1429              	.LBE19:
 1430              	.LBE18:
 604:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         __WFI();
 605:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     } else {
 606:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         __WFE();
 607:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 608:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1431              		.loc 1 608 1
 1432 0024 00BF     		nop
 1433 0026 0C37     		adds	r7, r7, #12
 1434              		.cfi_def_cfa_offset 4
 1435 0028 BD46     		mov	sp, r7
 1436              		.cfi_def_cfa_register 13
 1437              		@ sp needed
 1438 002a 80BC     		pop	{r7}
 1439              		.cfi_restore 7
 1440              		.cfi_def_cfa_offset 0
 1441 002c 7047     		bx	lr
 1442              	.L88:
 1443 002e 00BF     		.align	2
 1444              	.L87:
 1445 0030 00ED00E0 		.word	-536810240
 1446              		.cfi_endproc
 1447              	.LFE140:
 1449              		.section	.text.hals_pmu_to_deepsleepmode,"ax",%progbits
 1450              		.align	1
 1451              		.global	hals_pmu_to_deepsleepmode
 1452              		.syntax unified
 1453              		.thumb
 1454              		.thumb_func
 1455              		.fpu softvfp
 1457              	hals_pmu_to_deepsleepmode:
 1458              	.LFB141:
 609:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 610:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 611:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      PMU work at deepsleep mode
 612:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  ldo:
 613:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 614:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LDO_NORMAL: LDO operates normally when pmu enter deepsleep mode
 615:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LDO_LOWPOWER: LDO work at low power mode when pmu enter deepsleep mode
 616:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  lowdrive:
 617:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 618:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LOWDRIVER_ENABLE: low-driver mode enable in deep-sleep mode
 619:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_LOWDRIVER_DISABLE: low-driver mode disable in deep-sleep mode
 620:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  deepsleepmodecmd:
 621:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 622:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        WFI_CMD: use WFI command
 623:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        WFE_CMD: use WFE command
 624:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 625:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 626:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 627:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_to_deepsleepmode(uint32_t ldo, uint32_t lowdrive, uint8_t deepsleepmodecmd)
 628:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1459              		.loc 1 628 1
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 16
 1462              		@ frame_needed = 1, uses_anonymous_args = 0
 1463              		@ link register save eliminated.
 1464 0000 80B4     		push	{r7}
 1465              		.cfi_def_cfa_offset 4
 1466              		.cfi_offset 7, -4
 1467 0002 85B0     		sub	sp, sp, #20
 1468              		.cfi_def_cfa_offset 24
 1469 0004 00AF     		add	r7, sp, #0
 1470              		.cfi_def_cfa_register 7
 1471 0006 F860     		str	r0, [r7, #12]
 1472 0008 B960     		str	r1, [r7, #8]
 1473 000a 1346     		mov	r3, r2
 1474 000c FB71     		strb	r3, [r7, #7]
 629:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     static uint32_t reg_snap[ 4 ];
 630:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #if (1 == HAL_PARAMETER_CHECK)
 631:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((PMU_LDO_NORMAL != ldo) && (PMU_LDO_LOWPOWER != ldo)) {
 632:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("parameter [ldo] value is invalid");
 633:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return;
 634:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 635:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if((WFI_CMD != deepsleepmodecmd) && (WFE_CMD != deepsleepmodecmd)) {
 636:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         HAL_DEBUGE("parameter [deepsleepmodecmd] value is invalid");
 637:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         return;
 638:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 639:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** #endif /* 1 == HAL_PARAMETER_CHECK */
 640:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 641:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 642:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* clear stbmod and ldolp bits */
 643:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~((uint32_t)(PMU_CTL_STBMOD | PMU_CTL_LDOLP | PMU_CTL_LDEN | PMU_CTL_LDNP |
 1475              		.loc 1 643 13
 1476 000e 384B     		ldr	r3, .L94
 1477 0010 1A68     		ldr	r2, [r3]
 1478 0012 3749     		ldr	r1, .L94
 1479 0014 374B     		ldr	r3, .L94+4
 1480 0016 1340     		ands	r3, r3, r2
 1481 0018 0B60     		str	r3, [r1]
 644:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                             PMU_CTL_LDLP));
 645:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 646:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* set ldolp bit according to pmu_ldo */
 647:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= ldo;
 1482              		.loc 1 647 13
 1483 001a 354B     		ldr	r3, .L94
 1484 001c 1A68     		ldr	r2, [r3]
 1485 001e 3449     		ldr	r1, .L94
 1486 0020 FB68     		ldr	r3, [r7, #12]
 1487 0022 1343     		orrs	r3, r3, r2
 1488 0024 0B60     		str	r3, [r1]
 648:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 649:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* low drive mode config in deep-sleep mode */
 650:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(PMU_LOWDRIVER_ENABLE == lowdrive) {
 1489              		.loc 1 650 7
 1490 0026 BB68     		ldr	r3, [r7, #8]
 1491 0028 B3F5402F 		cmp	r3, #786432
 1492 002c 13D1     		bne	.L90
 651:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         if(PMU_LDO_NORMAL == ldo) {
 1493              		.loc 1 651 11
 1494 002e FB68     		ldr	r3, [r7, #12]
 1495 0030 002B     		cmp	r3, #0
 1496 0032 08D1     		bne	.L91
 652:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****             PMU_CTL |= (uint32_t)(PMU_CTL_LDEN | PMU_CTL_LDNP);
 1497              		.loc 1 652 21
 1498 0034 2E4B     		ldr	r3, .L94
 1499 0036 1B68     		ldr	r3, [r3]
 1500 0038 2D4A     		ldr	r2, .L94
 1501 003a 43F44023 		orr	r3, r3, #786432
 1502 003e 43F40063 		orr	r3, r3, #2048
 1503 0042 1360     		str	r3, [r2]
 1504 0044 07E0     		b	.L90
 1505              	.L91:
 653:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         } else {
 654:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****             PMU_CTL |= (uint32_t)(PMU_CTL_LDEN | PMU_CTL_LDLP);
 1506              		.loc 1 654 21
 1507 0046 2A4B     		ldr	r3, .L94
 1508 0048 1B68     		ldr	r3, [r3]
 1509 004a 294A     		ldr	r2, .L94
 1510 004c 43F44023 		orr	r3, r3, #786432
 1511 0050 43F48063 		orr	r3, r3, #1024
 1512 0054 1360     		str	r3, [r2]
 1513              	.L90:
 655:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         }
 656:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 657:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 658:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* set sleepdeep bit of Cortex-M4 system control register */
 659:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 1514              		.loc 1 659 14
 1515 0056 284B     		ldr	r3, .L94+8
 1516 0058 1B69     		ldr	r3, [r3, #16]
 1517 005a 274A     		ldr	r2, .L94+8
 1518 005c 43F00403 		orr	r3, r3, #4
 1519 0060 1361     		str	r3, [r2, #16]
 660:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 661:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     reg_snap[0] = REG32(0xE000E010U);
 1520              		.loc 1 661 19
 1521 0062 264B     		ldr	r3, .L94+12
 1522 0064 1B68     		ldr	r3, [r3]
 1523              		.loc 1 661 17
 1524 0066 264A     		ldr	r2, .L94+16
 1525 0068 1360     		str	r3, [r2]
 662:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     reg_snap[1] = REG32(0xE000E100U);
 1526              		.loc 1 662 19
 1527 006a 264B     		ldr	r3, .L94+20
 1528 006c 1B68     		ldr	r3, [r3]
 1529              		.loc 1 662 17
 1530 006e 244A     		ldr	r2, .L94+16
 1531 0070 5360     		str	r3, [r2, #4]
 663:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     reg_snap[2] = REG32(0xE000E104U);
 1532              		.loc 1 663 19
 1533 0072 254B     		ldr	r3, .L94+24
 1534 0074 1B68     		ldr	r3, [r3]
 1535              		.loc 1 663 17
 1536 0076 224A     		ldr	r2, .L94+16
 1537 0078 9360     		str	r3, [r2, #8]
 664:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     reg_snap[3] = REG32(0xE000E108U);
 1538              		.loc 1 664 19
 1539 007a 244B     		ldr	r3, .L94+28
 1540 007c 1B68     		ldr	r3, [r3]
 1541              		.loc 1 664 17
 1542 007e 204A     		ldr	r2, .L94+16
 1543 0080 D360     		str	r3, [r2, #12]
 665:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 666:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E010U) &= 0x00010004U;
 1544              		.loc 1 666 24
 1545 0082 1E4B     		ldr	r3, .L94+12
 1546 0084 1A68     		ldr	r2, [r3]
 1547 0086 1D49     		ldr	r1, .L94+12
 1548 0088 214B     		ldr	r3, .L94+32
 1549 008a 1340     		ands	r3, r3, r2
 1550 008c 0B60     		str	r3, [r1]
 667:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E180U)  = 0XB7FFEF19U;
 1551              		.loc 1 667 5
 1552 008e 214B     		ldr	r3, .L94+36
 1553              		.loc 1 667 25
 1554 0090 214A     		ldr	r2, .L94+40
 1555 0092 1A60     		str	r2, [r3]
 668:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E184U)  = 0XFFFFFBFFU;
 1556              		.loc 1 668 5
 1557 0094 214B     		ldr	r3, .L94+44
 1558              		.loc 1 668 25
 1559 0096 6FF48062 		mvn	r2, #1024
 1560 009a 1A60     		str	r2, [r3]
 669:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E188U)  = 0xFFFFFFFFU;
 1561              		.loc 1 669 5
 1562 009c 204B     		ldr	r3, .L94+48
 1563              		.loc 1 669 25
 1564 009e 4FF0FF32 		mov	r2, #-1
 1565 00a2 1A60     		str	r2, [r3]
 670:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 671:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* select WFI or WFE command to enter deepsleep mode */
 672:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(WFI_CMD == deepsleepmodecmd) {
 1566              		.loc 1 672 7
 1567 00a4 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1568 00a6 002B     		cmp	r3, #0
 1569 00a8 01D1     		bne	.L92
 1570              	.LBB20:
 1571              	.LBB21:
 299:../firmware/cmsis/inc/core_cmInstr.h **** }
 1572              		.loc 2 299 5
 1573              		.syntax unified
 1574              	@ 299 "../firmware/cmsis/inc/core_cmInstr.h" 1
 1575 00aa 30BF     		wfi
 1576              	@ 0 "" 2
 300:../firmware/cmsis/inc/core_cmInstr.h **** 
 1577              		.loc 2 300 1
 1578              		.thumb
 1579              		.syntax unified
 1580 00ac 05E0     		b	.L93
 1581              	.L92:
 1582              	.LBE21:
 1583              	.LBE20:
 1584              	.LBB22:
 1585              	.LBB23:
 312:../firmware/cmsis/inc/core_cmInstr.h **** 
 313:../firmware/cmsis/inc/core_cmInstr.h **** 
 314:../firmware/cmsis/inc/core_cmInstr.h **** /** \brief  Send Event
 315:../firmware/cmsis/inc/core_cmInstr.h **** 
 316:../firmware/cmsis/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 317:../firmware/cmsis/inc/core_cmInstr.h ****  */
 318:../firmware/cmsis/inc/core_cmInstr.h **** __attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
 319:../firmware/cmsis/inc/core_cmInstr.h **** {
 320:../firmware/cmsis/inc/core_cmInstr.h ****     __ASM volatile("sev");
 1586              		.loc 2 320 5
 1587              		.syntax unified
 1588              	@ 320 "../firmware/cmsis/inc/core_cmInstr.h" 1
 1589 00ae 40BF     		sev
 1590              	@ 0 "" 2
 321:../firmware/cmsis/inc/core_cmInstr.h **** }
 1591              		.loc 2 321 1
 1592              		.thumb
 1593              		.syntax unified
 1594 00b0 00BF     		nop
 1595              	.LBE23:
 1596              	.LBE22:
 1597              	.LBB24:
 1598              	.LBB25:
 310:../firmware/cmsis/inc/core_cmInstr.h **** }
 1599              		.loc 2 310 5
 1600              		.syntax unified
 1601              	@ 310 "../firmware/cmsis/inc/core_cmInstr.h" 1
 1602 00b2 20BF     		wfe
 1603              	@ 0 "" 2
 311:../firmware/cmsis/inc/core_cmInstr.h **** 
 1604              		.loc 2 311 1
 1605              		.thumb
 1606              		.syntax unified
 1607 00b4 00BF     		nop
 1608              	.LBE25:
 1609              	.LBE24:
 1610              	.LBB26:
 1611              	.LBB27:
 310:../firmware/cmsis/inc/core_cmInstr.h **** }
 1612              		.loc 2 310 5
 1613              		.syntax unified
 1614              	@ 310 "../firmware/cmsis/inc/core_cmInstr.h" 1
 1615 00b6 20BF     		wfe
 1616              	@ 0 "" 2
 311:../firmware/cmsis/inc/core_cmInstr.h **** 
 1617              		.loc 2 311 1
 1618              		.thumb
 1619              		.syntax unified
 1620 00b8 00BF     		nop
 1621              	.L93:
 1622              	.LBE27:
 1623              	.LBE26:
 673:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         __WFI();
 674:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     } else {
 675:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         __SEV();
 676:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         __WFE();
 677:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         __WFE();
 678:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 679:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 680:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E010U) = reg_snap[0];
 1624              		.loc 1 680 5
 1625 00ba 104A     		ldr	r2, .L94+12
 1626              		.loc 1 680 34
 1627 00bc 104B     		ldr	r3, .L94+16
 1628 00be 1B68     		ldr	r3, [r3]
 1629              		.loc 1 680 24
 1630 00c0 1360     		str	r3, [r2]
 681:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E100U) = reg_snap[1];
 1631              		.loc 1 681 5
 1632 00c2 104A     		ldr	r2, .L94+20
 1633              		.loc 1 681 34
 1634 00c4 0E4B     		ldr	r3, .L94+16
 1635 00c6 5B68     		ldr	r3, [r3, #4]
 1636              		.loc 1 681 24
 1637 00c8 1360     		str	r3, [r2]
 682:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E104U) = reg_snap[2];
 1638              		.loc 1 682 5
 1639 00ca 0F4A     		ldr	r2, .L94+24
 1640              		.loc 1 682 34
 1641 00cc 0C4B     		ldr	r3, .L94+16
 1642 00ce 9B68     		ldr	r3, [r3, #8]
 1643              		.loc 1 682 24
 1644 00d0 1360     		str	r3, [r2]
 683:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E108U) = reg_snap[3];
 1645              		.loc 1 683 5
 1646 00d2 0E4A     		ldr	r2, .L94+28
 1647              		.loc 1 683 34
 1648 00d4 0A4B     		ldr	r3, .L94+16
 1649 00d6 DB68     		ldr	r3, [r3, #12]
 1650              		.loc 1 683 24
 1651 00d8 1360     		str	r3, [r2]
 684:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 685:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* reset sleepdeep bit of Cortex-M4 system control register */
 686:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     SCB->SCR &= ~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 1652              		.loc 1 686 14
 1653 00da 074B     		ldr	r3, .L94+8
 1654 00dc 1B69     		ldr	r3, [r3, #16]
 1655 00de 064A     		ldr	r2, .L94+8
 1656 00e0 23F00403 		bic	r3, r3, #4
 1657 00e4 1361     		str	r3, [r2, #16]
 687:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1658              		.loc 1 687 1
 1659 00e6 00BF     		nop
 1660 00e8 1437     		adds	r7, r7, #20
 1661              		.cfi_def_cfa_offset 4
 1662 00ea BD46     		mov	sp, r7
 1663              		.cfi_def_cfa_register 13
 1664              		@ sp needed
 1665 00ec 80BC     		pop	{r7}
 1666              		.cfi_restore 7
 1667              		.cfi_def_cfa_offset 0
 1668 00ee 7047     		bx	lr
 1669              	.L95:
 1670              		.align	2
 1671              	.L94:
 1672 00f0 00700040 		.word	1073770496
 1673 00f4 FCF3F3FF 		.word	-789508
 1674 00f8 00ED00E0 		.word	-536810240
 1675 00fc 10E000E0 		.word	-536813552
 1676 0100 00000000 		.word	reg_snap.10997
 1677 0104 00E100E0 		.word	-536813312
 1678 0108 04E100E0 		.word	-536813308
 1679 010c 08E100E0 		.word	-536813304
 1680 0110 04000100 		.word	65540
 1681 0114 80E100E0 		.word	-536813184
 1682 0118 19EFFFB7 		.word	-1207963879
 1683 011c 84E100E0 		.word	-536813180
 1684 0120 88E100E0 		.word	-536813176
 1685              		.cfi_endproc
 1686              	.LFE141:
 1688              		.section	.text.hals_pmu_to_standbymode,"ax",%progbits
 1689              		.align	1
 1690              		.global	hals_pmu_to_standbymode
 1691              		.syntax unified
 1692              		.thumb
 1693              		.thumb_func
 1694              		.fpu softvfp
 1696              	hals_pmu_to_standbymode:
 1697              	.LFB142:
 688:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 689:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 690:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      pmu work at standby mode
 691:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 692:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 693:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 694:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 695:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_to_standbymode(void)
 696:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1698              		.loc 1 696 1
 1699              		.cfi_startproc
 1700              		@ args = 0, pretend = 0, frame = 0
 1701              		@ frame_needed = 1, uses_anonymous_args = 0
 1702              		@ link register save eliminated.
 1703 0000 80B4     		push	{r7}
 1704              		.cfi_def_cfa_offset 4
 1705              		.cfi_offset 7, -4
 1706 0002 00AF     		add	r7, sp, #0
 1707              		.cfi_def_cfa_register 7
 697:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* set stbmod bit */
 698:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= PMU_CTL_STBMOD;
 1708              		.loc 1 698 13
 1709 0004 144B     		ldr	r3, .L97
 1710 0006 1B68     		ldr	r3, [r3]
 1711 0008 134A     		ldr	r2, .L97
 1712 000a 43F00203 		orr	r3, r3, #2
 1713 000e 1360     		str	r3, [r2]
 699:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 700:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* reset wakeup flag */
 701:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= PMU_CTL_WURST;
 1714              		.loc 1 701 13
 1715 0010 114B     		ldr	r3, .L97
 1716 0012 1B68     		ldr	r3, [r3]
 1717 0014 104A     		ldr	r2, .L97
 1718 0016 43F00403 		orr	r3, r3, #4
 1719 001a 1360     		str	r3, [r2]
 702:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 703:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* set sleepdeep bit of Cortex-M4 system control register */
 704:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 1720              		.loc 1 704 14
 1721 001c 0F4B     		ldr	r3, .L97+4
 1722 001e 1B69     		ldr	r3, [r3, #16]
 1723 0020 0E4A     		ldr	r2, .L97+4
 1724 0022 43F00403 		orr	r3, r3, #4
 1725 0026 1361     		str	r3, [r2, #16]
 705:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 706:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E010U) &= 0x00010004U;
 1726              		.loc 1 706 24
 1727 0028 0D4B     		ldr	r3, .L97+8
 1728 002a 1A68     		ldr	r2, [r3]
 1729 002c 0C49     		ldr	r1, .L97+8
 1730 002e 0D4B     		ldr	r3, .L97+12
 1731 0030 1340     		ands	r3, r3, r2
 1732 0032 0B60     		str	r3, [r1]
 707:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E180U) = 0XFFFFFFFBU;
 1733              		.loc 1 707 5
 1734 0034 0C4B     		ldr	r3, .L97+16
 1735              		.loc 1 707 24
 1736 0036 6FF00402 		mvn	r2, #4
 1737 003a 1A60     		str	r2, [r3]
 708:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E184U) = 0XFFFFFFFFU;
 1738              		.loc 1 708 5
 1739 003c 0B4B     		ldr	r3, .L97+20
 1740              		.loc 1 708 24
 1741 003e 4FF0FF32 		mov	r2, #-1
 1742 0042 1A60     		str	r2, [r3]
 709:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     REG32(0xE000E188U) = 0xFFFFFFFFU;
 1743              		.loc 1 709 5
 1744 0044 0A4B     		ldr	r3, .L97+24
 1745              		.loc 1 709 24
 1746 0046 4FF0FF32 		mov	r2, #-1
 1747 004a 1A60     		str	r2, [r3]
 1748              	.LBB28:
 1749              	.LBB29:
 299:../firmware/cmsis/inc/core_cmInstr.h **** }
 1750              		.loc 2 299 5
 1751              		.syntax unified
 1752              	@ 299 "../firmware/cmsis/inc/core_cmInstr.h" 1
 1753 004c 30BF     		wfi
 1754              	@ 0 "" 2
 300:../firmware/cmsis/inc/core_cmInstr.h **** 
 1755              		.loc 2 300 1
 1756              		.thumb
 1757              		.syntax unified
 1758 004e 00BF     		nop
 1759              	.LBE29:
 1760              	.LBE28:
 710:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 711:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     /* select WFI command to enter standby mode */
 712:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     __WFI();
 713:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1761              		.loc 1 713 1
 1762 0050 00BF     		nop
 1763 0052 BD46     		mov	sp, r7
 1764              		.cfi_def_cfa_register 13
 1765              		@ sp needed
 1766 0054 80BC     		pop	{r7}
 1767              		.cfi_restore 7
 1768              		.cfi_def_cfa_offset 0
 1769 0056 7047     		bx	lr
 1770              	.L98:
 1771              		.align	2
 1772              	.L97:
 1773 0058 00700040 		.word	1073770496
 1774 005c 00ED00E0 		.word	-536810240
 1775 0060 10E000E0 		.word	-536813552
 1776 0064 04000100 		.word	65540
 1777 0068 80E100E0 		.word	-536813184
 1778 006c 84E100E0 		.word	-536813180
 1779 0070 88E100E0 		.word	-536813176
 1780              		.cfi_endproc
 1781              	.LFE142:
 1783              		.section	.text.hals_pmu_backup_write_enable,"ax",%progbits
 1784              		.align	1
 1785              		.global	hals_pmu_backup_write_enable
 1786              		.syntax unified
 1787              		.thumb
 1788              		.thumb_func
 1789              		.fpu softvfp
 1791              	hals_pmu_backup_write_enable:
 1792              	.LFB143:
 714:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 715:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 716:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      enable backup domain write
 717:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 718:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 719:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 720:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 721:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_backup_write_enable(void)
 722:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1793              		.loc 1 722 1
 1794              		.cfi_startproc
 1795              		@ args = 0, pretend = 0, frame = 0
 1796              		@ frame_needed = 1, uses_anonymous_args = 0
 1797              		@ link register save eliminated.
 1798 0000 80B4     		push	{r7}
 1799              		.cfi_def_cfa_offset 4
 1800              		.cfi_offset 7, -4
 1801 0002 00AF     		add	r7, sp, #0
 1802              		.cfi_def_cfa_register 7
 723:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL |= PMU_CTL_BKPWEN;
 1803              		.loc 1 723 13
 1804 0004 044B     		ldr	r3, .L100
 1805 0006 1B68     		ldr	r3, [r3]
 1806 0008 034A     		ldr	r2, .L100
 1807 000a 43F48073 		orr	r3, r3, #256
 1808 000e 1360     		str	r3, [r2]
 724:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1809              		.loc 1 724 1
 1810 0010 00BF     		nop
 1811 0012 BD46     		mov	sp, r7
 1812              		.cfi_def_cfa_register 13
 1813              		@ sp needed
 1814 0014 80BC     		pop	{r7}
 1815              		.cfi_restore 7
 1816              		.cfi_def_cfa_offset 0
 1817 0016 7047     		bx	lr
 1818              	.L101:
 1819              		.align	2
 1820              	.L100:
 1821 0018 00700040 		.word	1073770496
 1822              		.cfi_endproc
 1823              	.LFE143:
 1825              		.section	.text.hals_pmu_backup_write_disable,"ax",%progbits
 1826              		.align	1
 1827              		.global	hals_pmu_backup_write_disable
 1828              		.syntax unified
 1829              		.thumb
 1830              		.thumb_func
 1831              		.fpu softvfp
 1833              	hals_pmu_backup_write_disable:
 1834              	.LFB144:
 725:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 726:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 727:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      disable backup domain write
 728:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  none
 729:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 730:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 731:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 732:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_backup_write_disable(void)
 733:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1835              		.loc 1 733 1
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 1, uses_anonymous_args = 0
 1839              		@ link register save eliminated.
 1840 0000 80B4     		push	{r7}
 1841              		.cfi_def_cfa_offset 4
 1842              		.cfi_offset 7, -4
 1843 0002 00AF     		add	r7, sp, #0
 1844              		.cfi_def_cfa_register 7
 734:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     PMU_CTL &= ~PMU_CTL_BKPWEN;
 1845              		.loc 1 734 13
 1846 0004 044B     		ldr	r3, .L103
 1847 0006 1B68     		ldr	r3, [r3]
 1848 0008 034A     		ldr	r2, .L103
 1849 000a 23F48073 		bic	r3, r3, #256
 1850 000e 1360     		str	r3, [r2]
 735:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1851              		.loc 1 735 1
 1852 0010 00BF     		nop
 1853 0012 BD46     		mov	sp, r7
 1854              		.cfi_def_cfa_register 13
 1855              		@ sp needed
 1856 0014 80BC     		pop	{r7}
 1857              		.cfi_restore 7
 1858              		.cfi_def_cfa_offset 0
 1859 0016 7047     		bx	lr
 1860              	.L104:
 1861              		.align	2
 1862              	.L103:
 1863 0018 00700040 		.word	1073770496
 1864              		.cfi_endproc
 1865              	.LFE144:
 1867              		.section	.text.hals_pmu_flag_get,"ax",%progbits
 1868              		.align	1
 1869              		.global	hals_pmu_flag_get
 1870              		.syntax unified
 1871              		.thumb
 1872              		.thumb_func
 1873              		.fpu softvfp
 1875              	hals_pmu_flag_get:
 1876              	.LFB145:
 736:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 737:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 738:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      get flag state
 739:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  flag:
 740:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 only one parameter can be selected which is shown as below:
 741:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_WAKEUP: wakeup flag
 742:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_STANDBY: standby flag
 743:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_LVD: lvd flag
 744:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_LDOVSR: LDO voltage select ready flag
 745:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_HDR: high-driver ready flag
 746:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_HDSR: high-driver switch ready flag
 747:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_LDR: low-driver mode ready flag
 748:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 749:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     FlagStatus SET or RESET
 750:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 751:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** FlagStatus hals_pmu_flag_get(uint32_t flag)
 752:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1877              		.loc 1 752 1
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 16
 1880              		@ frame_needed = 1, uses_anonymous_args = 0
 1881              		@ link register save eliminated.
 1882 0000 80B4     		push	{r7}
 1883              		.cfi_def_cfa_offset 4
 1884              		.cfi_offset 7, -4
 1885 0002 85B0     		sub	sp, sp, #20
 1886              		.cfi_def_cfa_offset 24
 1887 0004 00AF     		add	r7, sp, #0
 1888              		.cfi_def_cfa_register 7
 1889 0006 7860     		str	r0, [r7, #4]
 753:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     FlagStatus ret_status = RESET;
 1890              		.loc 1 753 16
 1891 0008 0023     		movs	r3, #0
 1892 000a FB73     		strb	r3, [r7, #15]
 754:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 755:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(PMU_CS & flag) {
 1893              		.loc 1 755 8
 1894 000c 064B     		ldr	r3, .L108
 1895 000e 1A68     		ldr	r2, [r3]
 1896              		.loc 1 755 15
 1897 0010 7B68     		ldr	r3, [r7, #4]
 1898 0012 1340     		ands	r3, r3, r2
 1899              		.loc 1 755 7
 1900 0014 002B     		cmp	r3, #0
 1901 0016 01D0     		beq	.L106
 756:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         ret_status = SET;
 1902              		.loc 1 756 20
 1903 0018 0123     		movs	r3, #1
 1904 001a FB73     		strb	r3, [r7, #15]
 1905              	.L106:
 757:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 758:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 759:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     return ret_status;
 1906              		.loc 1 759 12
 1907 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 760:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1908              		.loc 1 760 1
 1909 001e 1846     		mov	r0, r3
 1910 0020 1437     		adds	r7, r7, #20
 1911              		.cfi_def_cfa_offset 4
 1912 0022 BD46     		mov	sp, r7
 1913              		.cfi_def_cfa_register 13
 1914              		@ sp needed
 1915 0024 80BC     		pop	{r7}
 1916              		.cfi_restore 7
 1917              		.cfi_def_cfa_offset 0
 1918 0026 7047     		bx	lr
 1919              	.L109:
 1920              		.align	2
 1921              	.L108:
 1922 0028 04700040 		.word	1073770500
 1923              		.cfi_endproc
 1924              	.LFE145:
 1926              		.section	.text.hals_pmu_flag_clear,"ax",%progbits
 1927              		.align	1
 1928              		.global	hals_pmu_flag_clear
 1929              		.syntax unified
 1930              		.thumb
 1931              		.thumb_func
 1932              		.fpu softvfp
 1934              	hals_pmu_flag_clear:
 1935              	.LFB146:
 761:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** 
 762:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** /*!
 763:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \brief      clear flag bit
 764:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[in]  flag:
 765:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****                 one or more parameters can be selected which are shown as below:
 766:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_RESET_WAKEUP: reset wakeup flag
 767:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****       \arg        PMU_FLAG_RESET_STANDBY: reset standby flag
 768:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \param[out] none
 769:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     \retval     none
 770:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** */
 771:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** void hals_pmu_flag_clear(uint32_t flag)
 772:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** {
 1936              		.loc 1 772 1
 1937              		.cfi_startproc
 1938              		@ args = 0, pretend = 0, frame = 8
 1939              		@ frame_needed = 1, uses_anonymous_args = 0
 1940              		@ link register save eliminated.
 1941 0000 80B4     		push	{r7}
 1942              		.cfi_def_cfa_offset 4
 1943              		.cfi_offset 7, -4
 1944 0002 83B0     		sub	sp, sp, #12
 1945              		.cfi_def_cfa_offset 16
 1946 0004 00AF     		add	r7, sp, #0
 1947              		.cfi_def_cfa_register 7
 1948 0006 7860     		str	r0, [r7, #4]
 773:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(RESET != (flag & PMU_FLAG_RESET_WAKEUP)) {
 1949              		.loc 1 773 23
 1950 0008 7B68     		ldr	r3, [r7, #4]
 1951 000a 03F00403 		and	r3, r3, #4
 1952              		.loc 1 773 7
 1953 000e 002B     		cmp	r3, #0
 1954 0010 05D0     		beq	.L111
 774:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         /* reset wakeup flag */
 775:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         PMU_CTL |= PMU_CTL_WURST;
 1955              		.loc 1 775 17
 1956 0012 0B4B     		ldr	r3, .L114
 1957 0014 1B68     		ldr	r3, [r3]
 1958 0016 0A4A     		ldr	r2, .L114
 1959 0018 43F00403 		orr	r3, r3, #4
 1960 001c 1360     		str	r3, [r2]
 1961              	.L111:
 776:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 777:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     if(RESET != (flag & PMU_FLAG_RESET_STANDBY)) {
 1962              		.loc 1 777 23
 1963 001e 7B68     		ldr	r3, [r7, #4]
 1964 0020 03F00803 		and	r3, r3, #8
 1965              		.loc 1 777 7
 1966 0024 002B     		cmp	r3, #0
 1967 0026 05D0     		beq	.L113
 778:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         /* reset standby flag */
 779:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****         PMU_CTL |= PMU_CTL_STBRST;
 1968              		.loc 1 779 17
 1969 0028 054B     		ldr	r3, .L114
 1970 002a 1B68     		ldr	r3, [r3]
 1971 002c 044A     		ldr	r2, .L114
 1972 002e 43F00803 		orr	r3, r3, #8
 1973 0032 1360     		str	r3, [r2]
 1974              	.L113:
 780:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c ****     }
 781:../firmware/gd32f3x0_hal_peripheral/Source/gd32f3x0_hal_pmu.c **** }
 1975              		.loc 1 781 1
 1976 0034 00BF     		nop
 1977 0036 0C37     		adds	r7, r7, #12
 1978              		.cfi_def_cfa_offset 4
 1979 0038 BD46     		mov	sp, r7
 1980              		.cfi_def_cfa_register 13
 1981              		@ sp needed
 1982 003a 80BC     		pop	{r7}
 1983              		.cfi_restore 7
 1984              		.cfi_def_cfa_offset 0
 1985 003c 7047     		bx	lr
 1986              	.L115:
 1987 003e 00BF     		.align	2
 1988              	.L114:
 1989 0040 00700040 		.word	1073770496
 1990              		.cfi_endproc
 1991              	.LFE146:
 1993              		.section	.bss.reg_snap.10997,"aw",%nobits
 1994              		.align	2
 1997              	reg_snap.10997:
 1998 0000 00000000 		.space	16
 1998      00000000 
 1998      00000000 
 1998      00000000 
 1999              		.text
 2000              	.Letext0:
 2001              		.file 3 "c:\\program files\\embeddedbuilder_v1.1.0.18805\\tools\\gnu tools arm embedded\\xpack-arm
 2002              		.file 4 "c:\\program files\\embeddedbuilder_v1.1.0.18805\\tools\\gnu tools arm embedded\\xpack-arm
 2003              		.file 5 "c:\\program files\\embeddedbuilder_v1.1.0.18805\\tools\\gnu tools arm embedded\\xpack-arm
 2004              		.file 6 "c:\\program files\\embeddedbuilder_v1.1.0.18805\\tools\\gnu tools arm embedded\\xpack-arm
 2005              		.file 7 "c:\\program files\\embeddedbuilder_v1.1.0.18805\\tools\\gnu tools arm embedded\\xpack-arm
 2006              		.file 8 "c:\\program files\\embeddedbuilder_v1.1.0.18805\\tools\\gnu tools arm embedded\\xpack-arm
 2007              		.file 9 "../firmware/GD32f3x0_hal_peripheral/Include/gd32f3x0_hal.h"
 2008              		.file 10 "../firmware/cmsis/inc/core_cm4.h"
 2009              		.file 11 "../firmware/cmsis/inc/system_gd32f3x0.h"
 2010              		.file 12 "../firmware/cmsis/inc/gd32f3x0.h"
 2011              		.file 13 "c:\\program files\\embeddedbuilder_v1.1.0.18805\\tools\\gnu tools arm embedded\\xpack-ar
 2012              		.file 14 "../firmware/GD32f3x0_hal_peripheral/Include/gd32f3x0_hal_pmu.h"
 2013              		.file 15 "../firmware/GD32f3x0_hal_peripheral/Include/gd32f3x0_hal_rcu.h"
 2014              		.file 16 "../firmware/GD32f3x0_hal_peripheral/Include/gd32f3x0_hal_exti.h"
DEFINED SYMBOLS
                            *ABS*:00000000 gd32f3x0_hal_pmu.c
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:16     .text.hal_pmu_deinit:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:24     .text.hal_pmu_deinit:00000000 hal_pmu_deinit
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:72     .text.hal_pmu_struct_init:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:79     .text.hal_pmu_struct_init:00000000 hal_pmu_struct_init
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:172    .text.hal_pmu_lvd_init:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:179    .text.hal_pmu_lvd_init:00000000 hal_pmu_lvd_init
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:914    .text.hals_pmu_lvd_select:00000000 hals_pmu_lvd_select
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:305    .text.hal_pmu_lvd_init:000000b4 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:312    .text.hal_pmu_lvd_start:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:319    .text.hal_pmu_lvd_start:00000000 hal_pmu_lvd_start
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:364    .text.hal_pmu_lvd_start:0000002c $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:369    .text.hal_pmu_lvd_stop:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:376    .text.hal_pmu_lvd_stop:00000000 hal_pmu_lvd_stop
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:433    .text.hal_pmu_lvd_stop:0000004c $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:440    .text.hal_pmu_wakeup_pin_enable:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:447    .text.hal_pmu_wakeup_pin_enable:00000000 hal_pmu_wakeup_pin_enable
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:498    .text.hal_pmu_wakeup_pin_enable:00000034 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:503    .text.hal_pmu_wakeup_pin_disable:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:510    .text.hal_pmu_wakeup_pin_disable:00000000 hal_pmu_wakeup_pin_disable
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:564    .text.hal_pmu_wakeup_pin_disable:00000038 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:569    .text.hal_pmu_lvd_irq:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:576    .text.hal_pmu_lvd_irq:00000000 hal_pmu_lvd_irq
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:639    .text.hal_pmu_lvd_irq_handle_set:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:646    .text.hal_pmu_lvd_irq_handle_set:00000000 hal_pmu_lvd_irq_handle_set
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:697    .text.hal_pmu_lvd_irq_handle_all_reset:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:704    .text.hal_pmu_lvd_irq_handle_all_reset:00000000 hal_pmu_lvd_irq_handle_all_reset
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:738    .text.hal_pmu_lvd_start_interrupt:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:745    .text.hal_pmu_lvd_start_interrupt:00000000 hal_pmu_lvd_start_interrupt
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:823    .text.hal_pmu_lvd_start_interrupt:00000060 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:829    .text.hal_pmu_lvd_stop_interrupt:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:836    .text.hal_pmu_lvd_stop_interrupt:00000000 hal_pmu_lvd_stop_interrupt
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:901    .text.hal_pmu_lvd_stop_interrupt:00000054 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:907    .text.hals_pmu_lvd_select:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:962    .text.hals_pmu_lvd_select:00000038 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:967    .text.hals_pmu_ldo_output_select:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:974    .text.hals_pmu_ldo_output_select:00000000 hals_pmu_ldo_output_select
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1016   .text.hals_pmu_ldo_output_select:0000002c $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1021   .text.hals_pmu_lowdriver_mode_enable:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1028   .text.hals_pmu_lowdriver_mode_enable:00000000 hals_pmu_lowdriver_mode_enable
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1064   .text.hals_pmu_lowdriver_mode_enable:00000024 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1069   .text.hals_pmu_lowdriver_mode_disable:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1076   .text.hals_pmu_lowdriver_mode_disable:00000000 hals_pmu_lowdriver_mode_disable
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1111   .text.hals_pmu_lowdriver_mode_disable:00000020 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1116   .text.hals_pmu_highdriver_mode_enable:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1123   .text.hals_pmu_highdriver_mode_enable:00000000 hals_pmu_highdriver_mode_enable
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1153   .text.hals_pmu_highdriver_mode_enable:00000018 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1158   .text.hals_pmu_highdriver_mode_disable:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1165   .text.hals_pmu_highdriver_mode_disable:00000000 hals_pmu_highdriver_mode_disable
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1195   .text.hals_pmu_highdriver_mode_disable:00000018 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1200   .text.hals_pmu_highdriver_switch_select:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1207   .text.hals_pmu_highdriver_switch_select:00000000 hals_pmu_highdriver_switch_select
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1875   .text.hals_pmu_flag_get:00000000 hals_pmu_flag_get
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1256   .text.hals_pmu_highdriver_switch_select:00000038 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1261   .text.hals_pmu_lowpower_driver_config:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1268   .text.hals_pmu_lowpower_driver_config:00000000 hals_pmu_lowpower_driver_config
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1310   .text.hals_pmu_lowpower_driver_config:0000002c $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1315   .text.hals_pmu_normalpower_driver_config:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1322   .text.hals_pmu_normalpower_driver_config:00000000 hals_pmu_normalpower_driver_config
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1364   .text.hals_pmu_normalpower_driver_config:0000002c $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1369   .text.hals_pmu_to_sleepmode:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1376   .text.hals_pmu_to_sleepmode:00000000 hals_pmu_to_sleepmode
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1445   .text.hals_pmu_to_sleepmode:00000030 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1450   .text.hals_pmu_to_deepsleepmode:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1457   .text.hals_pmu_to_deepsleepmode:00000000 hals_pmu_to_deepsleepmode
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1672   .text.hals_pmu_to_deepsleepmode:000000f0 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1997   .bss.reg_snap.10997:00000000 reg_snap.10997
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1689   .text.hals_pmu_to_standbymode:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1696   .text.hals_pmu_to_standbymode:00000000 hals_pmu_to_standbymode
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1773   .text.hals_pmu_to_standbymode:00000058 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1784   .text.hals_pmu_backup_write_enable:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1791   .text.hals_pmu_backup_write_enable:00000000 hals_pmu_backup_write_enable
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1821   .text.hals_pmu_backup_write_enable:00000018 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1826   .text.hals_pmu_backup_write_disable:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1833   .text.hals_pmu_backup_write_disable:00000000 hals_pmu_backup_write_disable
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1863   .text.hals_pmu_backup_write_disable:00000018 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1868   .text.hals_pmu_flag_get:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1922   .text.hals_pmu_flag_get:00000028 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1927   .text.hals_pmu_flag_clear:00000000 $t
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1934   .text.hals_pmu_flag_clear:00000000 hals_pmu_flag_clear
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1989   .text.hals_pmu_flag_clear:00000040 $d
C:\Users\peter\AppData\Local\Temp\cc187vCP.s:1994   .bss.reg_snap.10997:00000000 $d
                           .group:00000000 wm4.0.b316ac8f61e0e6e0285f1e03e5bd3513
                           .group:00000000 wm4.stdarg.h.31.b55da1089056868966f25de5dbfc7d3c
                           .group:00000000 wm4._newlib_version.h.4.9ba035841e762c3308916a0ce96032e7
                           .group:00000000 wm4.newlib.h.18.ac66930cc5dc086504ebba5cc05ab7f1
                           .group:00000000 wm4.ieeefp.h.77.d5685ba212d3ed6e914898d045f873e3
                           .group:00000000 wm4.features.h.22.fad1cec3bc7ff06488171438dbdcfd02
                           .group:00000000 wm4.config.h.220.6cac6a9685cfce5e83c17784171638d9
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4._default_types.h.6.959254cf5f09734ea7516c89e8bb21bd
                           .group:00000000 wm4.stddef.h.181.c3f52a3b0f4c288bddb5dda1562858e2
                           .group:00000000 wm4.cdefs.h.49.6260d97adb8d27534cbdc0f868b8ea87
                           .group:00000000 wm4.stddef.h.39.b727a6c3269d9d6ef9fc646b721a8287
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4._types.h.125.5cf8a495f1f7ef36777ad868a1e32068
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.184.03611d4f6b5bec9997bcf4279eceba07
                           .group:00000000 wm4.reent.h.17.90c2574d4acdcfce933db5cb09ff35fe
                           .group:00000000 wm4.types.h.40.e8c16e7ec36ba55f133d0616070e25fc
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.30.0e8bfd94e85db17dda3286ee81496fe6
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.69.ed3eae3cf73030a737515151ebcab7a1
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.gd32f3x0_hal.h.52.43337a488df56bad1a66550eb74593ea
                           .group:00000000 wm4.gd32f3x0.h.36.5dfcb46b6e5e152feffb6039fee007e2
                           .group:00000000 wm4.core_cm4.h.47.434d5634a5df7142236685d6945e71d7
                           .group:00000000 wm4._intsup.h.10.cce27fed8484c08a33f522034c30d2b5
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:00000000 wm4.core_cm4_simd.h.43.bf657009d9c246d6ac6e7b120cdd899a
                           .group:00000000 wm4.core_cm4.h.196.7d82f39a4c9e2de723b837137e6ae289
                           .group:00000000 wm4.gd32f3x0.h.180.82f67477079136206c5871e7542ee564
                           .group:00000000 wm4.gd32f3x0_libopt.h.36.45b869ab1209cc1a50f3dfc76a311cb9
                           .group:00000000 wm4.gd32f3x0_hal_dma.h.41.ca879783be1737b965b3ae4e7f93f872
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.d4493cd3736e51e9d56335045f26df45
                           .group:00000000 wm4.gd32f3x0_hal_fmc.h.43.2987de260e370bf3f5b8a24cb7cf3bf8
                           .group:00000000 wm4.gd32f3x0_hal_pmu.h.36.5635520c461bb7aaf91bffd9cbfc72ad
                           .group:00000000 wm4.gd32f3x0_hal_gpio.h.36.a12be1408d39f193128846456cde3d37
                           .group:00000000 wm4.gd32f3x0_hal_rcu.h.38.87d0c22ec8715f857cfeeefdccb19c2d
                           .group:00000000 wm4.gd32f3x0_hal_exti.h.36.1ea5944bb2717abba6eb4f5f2b24bf84
                           .group:00000000 wm4.gd32f3x0_hal_sys.h.35.2ceb07a2f85f308445b52768bbccb36f
                           .group:00000000 wm4.gd32f3x0_hal_syscfg.h.36.72a727ef72a22345530b3ff53cbe3ce3
                           .group:00000000 wm4.gd32f3x0_hal_nvic.h.36.4aa8cd20672a0a2c198d8567b1de409e
                           .group:00000000 wm4.gd32f3x0_hal_cmp.h.36.f85d9d5e9ce0d5ec5a6c328e83b87368
                           .group:00000000 wm4.gd32f3x0_hal_crc.h.36.1900d76e2c07c18b1ef1c9b856f287b8
                           .group:00000000 wm4.gd32f3x0_hal_adc.h.36.8c3322d47f1ee3cab423f686efb96e34
                           .group:00000000 wm4.gd32f3x0_hal_ctc.h.36.847bc0cba62101d5ce7e8bf46a1d8bff
                           .group:00000000 wm4.gd32f3x0_hal_fwdgt.h.37.9a77d48f0ebb1bea9efac8306d3abfa3
                           .group:00000000 wm4.gd32f3x0_hal_wwdgt.h.36.19843a8487f7f073536e58bdf0d3f2d3
                           .group:00000000 wm4.gd32f3x0_hal_spi_com.h.36.6baebef46bf9bda5babad635e2a47342
                           .group:00000000 wm4.gd32f3x0_hal_spi.h.36.c5af6148e40a30fadbbdd1f06ceea13d
                           .group:00000000 wm4.gd32f3x0_hal_i2s.h.36.e903082eeeee8f5fb4aff85df922f163
                           .group:00000000 wm4.gd32f3x0_hal_usart_com.h.36.69752e97184d87492213ad2f277017fc
                           .group:00000000 wm4.gd32f3x0_hal_uart.h.36.cbee0c6c192eff6011d6338977fcd04b
                           .group:00000000 wm4.gd32f3x0_hal_usrt.h.36.ffd63cfab4e0501d677bc717158e43a6
                           .group:00000000 wm4.gd32f3x0_hal_irda.h.36.3910de0ccf8d5623643304fed3f81eb2
                           .group:00000000 wm4.gd32f3x0_hal_smartcard.h.36.ab9bc113f17ef2e0fb1ebed69f0678d8
                           .group:00000000 wm4.gd32f3x0_hal_rtc.h.36.5e01e9f7c643662797b76c8fb127db6a
                           .group:00000000 wm4.gd32f3x0_hal_i2c_com.h.36.93c032b15c0ba33e15ba767e036a725b
                           .group:00000000 wm4.gd32f3x0_hal_i2c.h.36.5070b63e35481aadf06d643445a9b538
                           .group:00000000 wm4.gd32f3x0_hal_smbus.h.36.ff84c1a5256828a88dd698d2f412ded9
                           .group:00000000 wm4.gd32f3x0_hal_timer.h.36.1cc370b1b382cdb697c16ab5f59079f9
                           .group:00000000 wm4.gd32f3x0_hal.h.138.6420920baed40fecd6e3a38f9485824a

UNDEFINED SYMBOLS
hal_rcu_periph_reset_enable
hal_rcu_periph_reset_disable
hal_exti_internal_deinit
hals_exti_interrupt_flag_clear
hals_exti_interrupt_flag_get
